<?xml version="1.0" encoding="UTF-8"?>
<web-fragment version="3.0" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-fragment_3_0.xsd">

	<name>springmvc</name>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:applicationContext.xml</param-value>
	</context-param>

	<!--*****************************************listener************************************************** -->

	<!--
		Processes a "contextConfigLocation" context-param and passes its value to the context instance,
		parsing it into potentially multiple file paths which can be separated by any number of commas and spaces,

		e.g. "WEB-INF/applicationContext1.xml, WEB-INF/applicationContext2.xml".

		Ant-style path patterns are supported as well,
		e.g. "WEB-INF/*Context.xml,WEB-INF/spring*.xml" or "WEB-INF/**/*Context.xml".

		If not explicitly specified,
		the context implementation is supposed to use a default location (with XmlWebApplicationContext: "/WEB-INF/applicationContext.xml").
	-->

	<!--
		ContextLoaderListener中加载的context成功后，
		spring 将 applicationContext存放在ServletContext中key值为"org.springframework.web.context.WebApplicationContext.ROOT"的attribute中。
		(servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context));

		可以通过WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext)
		或WebApplicationContextUtils.getWebApplicationContext(servletContext)方法来获取对应的applicationContext。 
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

	<!--*****************************************servlet************************************************** -->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:springmvc/springmvc-servlet.xml</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!--*****************************************filter************************************************** -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<!-- 用途不大，没什么用 -->
	<!-- -->
	<filter>
		<filter-name>commonsRequestLoggingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CommonsRequestLoggingFilter</filter-class>
		<init-param>
			<param-name>includeQueryString</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>includeClientInfo</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>includePayload</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>commonsRequestLoggingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

</web-fragment>