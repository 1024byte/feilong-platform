### Eclipse Workspace Patch 1.0
#P mp2-new
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/PublicTokenResponse.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/PublicTokenResponse.java	(revision 0)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/PublicTokenResponse.java	(working copy)
@@ -0,0 +1,113 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.payment.payment.adaptor.tcash;
+
+import java.io.Serializable;
+
+/**
+ * Below table shows T-Cash Public Token Generator response (Json).
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 1.0.8 2014年7月21日 下午3:35:08
+ * @since 1.0.8
+ */
+public final class PublicTokenResponse implements Serializable{
+
+	/** The Constant serialVersionUID. */
+	private static final long	serialVersionUID	= 288232184048495608L;
+
+	/**
+	 * Public token that used by customer when they redirect into T-Cash landing page<br>
+	 * Example 1: -----BEGIN PGP MESSAGE-----\nVersion: BCPG v1.47\n\nhQEOAyYtPQbS+5JtEAP/fI1MbXcrVa/83WlZS6y+76g
+	 */
+	private String				pgpToken;
+
+	/**
+	 * T-Cash reference number that will be used by merchant for checking customer transaction<br>
+	 * Example 1: 2506141402007010.
+	 */
+	private String				refNum;
+
+	/**
+	 * Limit time for using public token (in milisecond)<br>
+	 * Example 1: 1403679721180.
+	 */
+	private String				fastTime;
+
+	/**
+	 * 获得 public token that used by customer when they redirect into T-Cash landing page<br>
+	 * Example 1: -----BEGIN PGP MESSAGE-----\nVersion: BCPG v1.
+	 * 
+	 * @return the pgpToken
+	 */
+	public String getPgpToken(){
+		return pgpToken;
+	}
+
+	/**
+	 * 设置 public token that used by customer when they redirect into T-Cash landing page<br>
+	 * Example 1: -----BEGIN PGP MESSAGE-----\nVersion: BCPG v1.
+	 * 
+	 * @param pgpToken
+	 *            the pgpToken to set
+	 */
+	public void setPgpToken(String pgpToken){
+		this.pgpToken = pgpToken;
+	}
+
+	/**
+	 * 获得 t-Cash reference number that will be used by merchant for checking customer transaction<br>
+	 * Example 1: 2506141402007010.
+	 * 
+	 * @return the refNum
+	 */
+	public String getRefNum(){
+		return refNum;
+	}
+
+	/**
+	 * 设置 t-Cash reference number that will be used by merchant for checking customer transaction<br>
+	 * Example 1: 2506141402007010.
+	 * 
+	 * @param refNum
+	 *            the refNum to set
+	 */
+	public void setRefNum(String refNum){
+		this.refNum = refNum;
+	}
+
+	/**
+	 * 获得 limit time for using public token (in milisecond)<br>
+	 * Example 1: 1403679721180.
+	 * 
+	 * @return the fastTime
+	 */
+	public String getFastTime(){
+		return fastTime;
+	}
+
+	/**
+	 * 设置 limit time for using public token (in milisecond)<br>
+	 * Example 1: 1403679721180.
+	 * 
+	 * @param fastTime
+	 *            the fastTime to set
+	 */
+	public void setFastTime(String fastTime){
+		this.fastTime = fastTime;
+	}
+
+}
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/TcashPayAdaptor.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/TcashPayAdaptor.java	(revision 0)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/TcashPayAdaptor.java	(working copy)
@@ -0,0 +1,329 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.payment.payment.adaptor.tcash;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.servlet.http.HttpServletRequest;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.baozun.mp2.enumtype.HttpMethodType;
+import com.baozun.mp2.tools.json.JsonUtil;
+import com.baozun.mp2.util.HttpClientConfig;
+import com.baozun.mp2.util.HttpClientUtil;
+import com.baozun.mp2.util.NumberUtil;
+import com.baozun.mp2.util.Validator;
+import com.baozun.payment.command.PaymentResult;
+import com.baozun.payment.payment.adaptor.AbstractPaymentAdaptor;
+import com.baozun.payment.payment.command.PayRequest;
+import com.baozun.payment.payment.command.PaymentFormEntity;
+
+/**
+ * tcash.
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 1.0.8 2014年7月17日 上午11:47:11
+ * @since 1.0.8
+ */
+public class TcashPayAdaptor extends AbstractPaymentAdaptor{
+
+	/** The Constant log. */
+	private static final Logger	log	= LoggerFactory.getLogger(TcashPayAdaptor.class);
+
+	//***********************************************************************************************
+
+	/**
+	 * Terminal ID Merchant from T-Cash <br>
+	 * String (15) M <br>
+	 * example: 10601.
+	 */
+	private String				terminalId;
+
+	/**
+	 * User Credential that had been generated by T-Cash<br>
+	 * String (30) M<br>
+	 * example: testing.
+	 */
+	private String				userKey;
+
+	/**
+	 * Password Credential that had been generated by T-Cash <br>
+	 * String (30) M<br>
+	 * example: 1234.
+	 */
+	private String				password;
+
+	/**
+	 * Signature customer that had been generated by T-Cash <br>
+	 * String (30) M<br>
+	 * example: 1234.
+	 */
+	private String				signature;
+
+	//***********************************************************************************************
+
+	/** 取public token 的url地址. */
+	private String				publicTokenURL;
+
+	/** 提交地址. */
+	private String				landingPageURL;
+
+	/** 提交的method. */
+	private String				submitMethod;
+
+	//***********************************************************************************************
+
+	/** The price pattern. */
+	private String				pricePattern;
+
+	/**
+	 * Below table shows all attribute used in T-Cash Public Token request. <br>
+	 * Message will transferred using HTTP GET (if using Javascript) or HTTP POST (if using backend process) protocol.
+	 * 
+	 * @param payRequest
+	 *            the pay request
+	 * @return the public token
+	 */
+	private String getPublicToken(PayRequest payRequest){
+
+		//**************************************************************************
+		// Merchant page that prepared for success payment transaction <br>
+		// String (150) M<br>
+		// example: http://www.merchant-tcash.com/merchant_visitek/success.html
+		String successUrl = payRequest.getReturnUrl();
+
+		// Merchant page that prepared for failed payment transaction <br>
+		// String (150) M<br>
+		// example: http://www.merchant-tcash.com/merchant_visitek/failed.html
+		String failedUrl = payRequest.getNotifyUrl();
+
+		String totalAmount = NumberUtil.toString(payRequest.getTotalFee(), pricePattern);
+
+		// Customer shopping items <br>
+		// String(json) Optional<br>
+		// example: [["LENOVO IdeaCentre C320 444 All-in-One  - White","500","1"]]
+		String items = "";
+
+		//**************************************************************************
+
+		Map<String, String> params = new HashMap<String, String>();
+
+		//Terminal ID Merchant from T-Cash
+		params.put("terminalId", terminalId);
+
+		//User Credential that had been generated by T-Cash
+		params.put("userKey", userKey);
+
+		//Password Credential that had been generated by T-Cash
+		params.put("password", password);
+
+		//Signature customer that had been generated by T-Cash
+		params.put("signature", signature);
+
+		//********************************************************************
+		//		 * Merchant transaction ID <br>
+		//		 * String (30) M <br>
+		//		 * example: 109873
+		params.put("trxId", payRequest.getTradeNo());
+
+		//Grand total bill customer (no separator)
+		//   String (7) M<br>
+		//   example: 300000
+		params.put("total", totalAmount);
+
+		//Merchant page that prepared for success payment transaction
+		params.put("successUrl", successUrl);
+
+		//Merchant page that prepared for failed payment transaction 
+		params.put("failedUrl", failedUrl);
+
+		//Customer shopping items
+		params.put("items", items);
+
+		HttpClientConfig httpClientConfig = new HttpClientConfig();
+		httpClientConfig.setHttpMethodType(HttpMethodType.POST);
+
+		httpClientConfig.setParams(params);
+		httpClientConfig.setUri(publicTokenURL);
+
+		String responseBodyAsString = HttpClientUtil.getResponseBodyAsString(httpClientConfig);
+
+		if (log.isInfoEnabled()){
+			log.info("responseBodyAsString:{}", responseBodyAsString);
+		}
+
+		return responseBodyAsString;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see
+	 * com.feilong.framework.netpay.payment.PaymentAdaptor#getPaymentFormEntity(com.feilong.framework.netpay.payment.command.PayRequest,
+	 * java.util.Map)
+	 */
+	public PaymentFormEntity getPaymentFormEntity(PayRequest payRequest,Map<String, String> specialParamMap){
+		doCommonValidate(payRequest);
+
+		String publicToken = getPublicToken(payRequest);
+
+		if (Validator.isNotNullOrEmpty(publicToken)){
+			PublicTokenResponse publicTokenResponse = JsonUtil.toBean(publicToken, PublicTokenResponse.class);
+
+			String pgpToken = publicTokenResponse.getPgpToken();
+			String refNum = publicTokenResponse.getRefNum();
+			String fastTime = publicTokenResponse.getFastTime();
+
+			// ******************************************************************************
+			Map<String, String> map = new HashMap<String, String>();
+			map.put("message", pgpToken);
+
+			return getPaymentFormEntity(landingPageURL, submitMethod, map);
+		}
+		return null;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see com.feilong.framework.netpay.payment.PaymentAdaptor#verifyNotify(javax.servlet.http.HttpServletRequest)
+	 */
+	public PaymentResult verifyNotify(HttpServletRequest request) throws IllegalArgumentException{
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see com.feilong.framework.netpay.payment.PaymentAdaptor#verifyRedirect(javax.servlet.http.HttpServletRequest)
+	 */
+	public PaymentResult verifyRedirect(HttpServletRequest request){
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see com.feilong.framework.netpay.payment.PaymentAdaptor#getFeedbackTradeNo(javax.servlet.http.HttpServletRequest)
+	 */
+	public String getFeedbackTradeNo(HttpServletRequest request){
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see com.feilong.framework.netpay.payment.PaymentAdaptor#getFeedbackTotalFee(javax.servlet.http.HttpServletRequest)
+	 */
+	public String getFeedbackTotalFee(HttpServletRequest request){
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	/**
+	 * 设置 terminal ID Merchant from T-Cash <br>
+	 * String (15) M <br>
+	 * example: 10601.
+	 * 
+	 * @param terminalId
+	 *            the terminalId to set
+	 */
+	public void setTerminalId(String terminalId){
+		this.terminalId = terminalId;
+	}
+
+	/**
+	 * 设置 user Credential that had been generated by T-Cash<br>
+	 * String (30) M<br>
+	 * example: testing.
+	 * 
+	 * @param userKey
+	 *            the userKey to set
+	 */
+	public void setUserKey(String userKey){
+		this.userKey = userKey;
+	}
+
+	/**
+	 * 设置 password Credential that had been generated by T-Cash <br>
+	 * String (30) M<br>
+	 * example: 1234.
+	 * 
+	 * @param password
+	 *            the password to set
+	 */
+	public void setPassword(String password){
+		this.password = password;
+	}
+
+	/**
+	 * 设置 signature customer that had been generated by T-Cash <br>
+	 * String (30) M<br>
+	 * example: 1234.
+	 * 
+	 * @param signature
+	 *            the signature to set
+	 */
+	public void setSignature(String signature){
+		this.signature = signature;
+	}
+
+	/**
+	 * 设置 取public token 的url地址.
+	 * 
+	 * @param publicTokenURL
+	 *            the publicTokenURL to set
+	 */
+	public void setPublicTokenURL(String publicTokenURL){
+		this.publicTokenURL = publicTokenURL;
+	}
+
+	/**
+	 * 设置 the price pattern.
+	 * 
+	 * @param pricePattern
+	 *            the pricePattern to set
+	 */
+	public void setPricePattern(String pricePattern){
+		this.pricePattern = pricePattern;
+	}
+
+	/**
+	 * 设置 提交地址.
+	 * 
+	 * @param landingPageURL
+	 *            the landingPageURL to set
+	 */
+	public void setLandingPageURL(String landingPageURL){
+		this.landingPageURL = landingPageURL;
+	}
+
+	/**
+	 * 设置 提交的method.
+	 * 
+	 * @param submitMethod
+	 *            the submitMethod to set
+	 */
+	public void setSubmitMethod(String submitMethod){
+		this.submitMethod = submitMethod;
+	}
+}
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/package-info.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/package-info.java	(revision 0)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/package-info.java	(working copy)
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ *add t-cash
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a> 
+ * @version 1.0.8 2014年7月17日 上午11:37:26 
+ * @since 1.0.8
+ */
+package com.baozun.payment.payment.adaptor.tcash;
\ No newline at end of file
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/CheckTransactionStatus.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/CheckTransactionStatus.java	(revision 0)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/CheckTransactionStatus.java	(working copy)
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.payment.advance.adaptor.tcash;
+
+/**
+ * 状态
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 1.0.8 2014年7月22日 下午3:57:46
+ * @since 1.0.8
+ */
+public interface CheckTransactionStatus{
+
+	/** Status Customer Transaction . */
+	String	SUCCESS_COMPLETED	= "SUCCESS_COMPLETED";
+
+}
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/TcashAdvanceAdaptor.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/TcashAdvanceAdaptor.java	(revision 0)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/TcashAdvanceAdaptor.java	(working copy)
@@ -0,0 +1,218 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.payment.advance.adaptor.tcash;
+
+import java.math.BigDecimal;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.baozun.mp2.date.DatePattern;
+import com.baozun.mp2.date.DateUtil;
+import com.baozun.mp2.enumtype.HttpMethodType;
+import com.baozun.mp2.tools.json.JsonUtil;
+import com.baozun.mp2.util.HttpClientConfig;
+import com.baozun.mp2.util.HttpClientUtil;
+import com.baozun.mp2.util.Slf4jUtil;
+import com.baozun.mp2.util.Validator;
+import com.baozun.payment.advance.AbstractPaymentAdvanceAdaptor;
+import com.baozun.payment.advance.command.QueryRequest;
+import com.baozun.payment.advance.command.QueryResult;
+import com.baozun.payment.command.PaymentResult;
+
+/**
+ * The Class TcashAdvanceAdaptor.
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 1.0.8 2014-7-21 16:01:57
+ */
+public class TcashAdvanceAdaptor extends AbstractPaymentAdvanceAdaptor{
+
+	/** The Constant log. */
+	private static final Logger	log	= LoggerFactory.getLogger(TcashAdvanceAdaptor.class);
+
+	private String				checkTransactionStatusURL;
+
+	private String				checkTransactionStatusMethod;
+
+	/**
+	 * String (15) M <br>
+	 * Terminal ID Merchant from T-Cash <br>
+	 * 10601
+	 */
+	private String				terminalId;
+
+	/**
+	 * String (30) M <br>
+	 * User Credential that had been generated by T-Cash <br>
+	 * testing
+	 */
+	private String				userKey;
+
+	/**
+	 * String (30) M <br>
+	 * Password Credential that had been generated by T-Cash <br>
+	 * 1234
+	 */
+	private String				passKey;
+
+	/**
+	 * String (30) M <br>
+	 * Signature customer that had been generated by T-Cash <br>
+	 * 1234
+	 */
+	private String				signKey;
+
+	public QueryResult getQueryResult(QueryRequest queryRequest) throws Exception{
+
+		// *************************************************************
+		String merchantTransactionID = queryRequest.getTradeNo();
+		String refNum = queryRequest.getGatewayTradeNo();
+
+		Map<String, String> params = new HashMap<String, String>();
+
+		params.put("terminalId", terminalId);
+		params.put("userKey", userKey);
+		params.put("passKey", passKey);
+		params.put("signKey", signKey);
+
+		/**
+		 * String (30) M <br>
+		 * T-Cash reference number that generated when merchant generate public token<br>
+		 * 1709131628081576
+		 */
+		params.put("refNum", refNum);
+
+		HttpClientConfig httpClientConfig = new HttpClientConfig();
+
+		httpClientConfig.setHttpMethodType(HttpMethodType.getByMethodValueIgnoreCase(checkTransactionStatusMethod));
+
+		httpClientConfig.setParams(params);
+		httpClientConfig.setUri(checkTransactionStatusURL);
+
+		String responseBodyAsString = HttpClientUtil.getResponseBodyAsString(httpClientConfig);
+
+		String gatewayResult = responseBodyAsString;
+		CheckTransactionStatusResponse checkTransactionStatusResponse = JsonUtil
+				.toBean(gatewayResult, CheckTransactionStatusResponse.class);
+
+		try{
+
+			// ******************************************************************
+			String transactionStatus = checkTransactionStatusResponse.getStatus();
+
+			//  
+			if (Validator.isNullOrEmpty(transactionStatus)){
+				String messagePattern = "t-cash transactionStatus isNullOrEmpty,checkTransactionStatusResponse:{},responseBodyAsString is:{}";
+				String formatMessage = Slf4jUtil.formatMessage(
+						messagePattern,
+						JsonUtil.format(checkTransactionStatusResponse),
+						gatewayResult);
+				throw new RuntimeException(formatMessage);
+			}
+
+			PaymentResult paymentResult = toPaymentResult(transactionStatus);
+			String gatewayTradeNo = checkTransactionStatusResponse.getRefNum();
+			BigDecimal gatewayAmount = new BigDecimal(checkTransactionStatusResponse.getAmount());
+			Date gatewayPaymentTime = DateUtil.string2Date(checkTransactionStatusResponse.getTransactionDate(), DatePattern.commonWithTime);
+			QueryResult queryResult = new QueryResult();
+
+			queryResult.setGatewayAmount(gatewayAmount);
+			queryResult.setGatewayPaymentTime(gatewayPaymentTime);
+			queryResult.setGatewayResult(gatewayResult);
+			queryResult.setGatewayTradeNo(gatewayTradeNo);
+
+			queryResult.setPaymentResult(paymentResult);
+			queryResult.setQueryResultCommand(checkTransactionStatusResponse);
+			queryResult.setTradeNo(merchantTransactionID);
+
+			return queryResult;
+		}catch (Exception e){
+			log.error("{},queryRequest:{}", e.getMessage(), JsonUtil.format(queryRequest));
+			e.printStackTrace();
+			throw new RuntimeException(e);
+		}
+	}
+
+	/**
+	 * To payment result.
+	 * 
+	 * @param transactionStatus
+	 *            the transaction status
+	 * @return the payment result
+	 */
+	private PaymentResult toPaymentResult(String transactionStatus){
+		if (CheckTransactionStatus.SUCCESS_COMPLETED.equals(transactionStatus)){
+			return PaymentResult.PAID;
+		}else{
+			//TODO
+			// 其余视为 失败,可以重新支付
+			return PaymentResult.FAIL;
+		}
+	}
+
+	/**
+	 * @param terminalId
+	 *            the terminalId to set
+	 */
+	public void setTerminalId(String terminalId){
+		this.terminalId = terminalId;
+	}
+
+	/**
+	 * @param userKey
+	 *            the userKey to set
+	 */
+	public void setUserKey(String userKey){
+		this.userKey = userKey;
+	}
+
+	/**
+	 * @param passKey
+	 *            the passKey to set
+	 */
+	public void setPassKey(String passKey){
+		this.passKey = passKey;
+	}
+
+	/**
+	 * @param signKey
+	 *            the signKey to set
+	 */
+	public void setSignKey(String signKey){
+		this.signKey = signKey;
+	}
+
+	/**
+	 * @param checkTransactionStatusURL
+	 *            the checkTransactionStatusURL to set
+	 */
+	public void setCheckTransactionStatusURL(String checkTransactionStatusURL){
+		this.checkTransactionStatusURL = checkTransactionStatusURL;
+	}
+
+	/**
+	 * @param checkTransactionStatusMethod
+	 *            the checkTransactionStatusMethod to set
+	 */
+	public void setCheckTransactionStatusMethod(String checkTransactionStatusMethod){
+		this.checkTransactionStatusMethod = checkTransactionStatusMethod;
+	}
+
+}
Index: mp2-commons/src/main/java/com/baozun/mp2/util/EnumUtil.java
===================================================================
--- mp2-commons/src/main/java/com/baozun/mp2/util/EnumUtil.java	(revision 11560)
+++ mp2-commons/src/main/java/com/baozun/mp2/util/EnumUtil.java	(working copy)
@@ -15,13 +15,14 @@
  */
 package com.baozun.mp2.util;
 
-import java.lang.reflect.InvocationTargetException;
-
 import org.apache.commons.lang.enums.EnumUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.baozun.mp2.bean.BeanUtil;
+import com.baozun.mp2.bean.BeanUtilException;
 import com.baozun.mp2.enumtype.HttpMethodType;
+import com.baozun.mp2.tools.json.JsonUtil;
 
 /**
  * enum工具类.
@@ -28,18 +29,18 @@
  * 
  * @author <a href="mailto:venusdrogon@163.com">feilong</a>
  * @version 1.0.6 2014年5月8日 上午3:30:51
+ * @version 1.0.8 2014-7-22 13:43 add {@link #getEnumByPropertyValueIgnoreCase(Class, String, String)}
+ * @see EnumUtils
+ * @see org.apache.commons.lang3.EnumUtils
  * @since 1.0.6
- * @see {@link EnumUtils}
- * @see {@link org.apache.commons.lang3.EnumUtils}
  */
-public class EnumUtil{
+public final class EnumUtil{
 
 	/** The Constant log. */
 	private static final Logger	log	= LoggerFactory.getLogger(EnumUtil.class);
 
 	/**
-	 * 通过fieldName的 value(忽视大小写) 获得枚举<br>
-	 * 方法内部通过反射的机制来读取 get+fieldName首字母大写方法 获得枚举value 循环和value 忽视大小写比较,如果相等即返回. <br>
+	 * 通过fieldName的 value(忽视大小写) 获得枚举(equalsIgnoreCase判断)<br>
 	 * 
 	 * <pre>
 	 * 
@@ -54,51 +55,127 @@
 	 *            the element type
 	 * @param enumClass
 	 *            the enum class 比如 {@link HttpMethodType}
-	 * @param fieldName
+	 * @param propertyName
 	 *            字段名称,比如 {@link HttpMethodType}的method,按照javabean 规范
 	 * @param value
-	 *            属性值 比如post,此处判断 忽视大小写
-	 * @return 如果 value 是null,返回null<br>
-	 *         如果查找不到,也返回null<br>
-	 *         如果出现异常,也返回null<br>
-	 *         其他情况 方法内部通过反射的机制来读取 get+fieldName首字母大写方法 获得枚举value 循环和value 忽视大小写比较,如果相等即返回
+	 *            属性值 比如post
+	 * @return 获得 enum constant
+	 * @throws IllegalArgumentException
+	 *             if Validator.isNullOrEmpty(enumClass) or Validator.isNullOrEmpty(propertyName)
+	 * @throws NoSuchFieldException
+	 *             找不到匹配的枚举
+	 * @throws BeanUtilException
+	 *             the bean util exception
 	 */
-	public static <E extends Enum<E>> E getEnumByField(Class<E> enumClass,String fieldName,String value){
-		if (Validator.isNullOrEmpty(fieldName)){
-			throw new NullPointerException("the fieldName is null or empty!");
+	public static <E extends Enum<E>> E getEnumByPropertyValueIgnoreCase(Class<E> enumClass,String propertyName,String value)
+			throws IllegalArgumentException,NoSuchFieldException,BeanUtilException{
+		boolean ignoreCase = true;
+		return _getEnumByPropertyValue(enumClass, propertyName, value, ignoreCase);
+	}
+
+	/**
+	 * 通过fieldName的 value 获得枚举(equals判断)<br>
+	 * 
+	 * <pre>
+	 * 
+	 * 适用于这种{@link HttpMethodType} 待自定义属性的枚举类型,调用方式:
+	 * 
+	 * {@code
+	 * 	EnumUtil.getEnumByField(HttpMethodType.class, "method", "get")
+	 * }
+	 * </pre>
+	 * 
+	 * @param <E>
+	 *            the element type
+	 * @param enumClass
+	 *            the enum class 比如 {@link HttpMethodType}
+	 * @param propertyName
+	 *            字段名称,比如 {@link HttpMethodType}的method,按照javabean 规范
+	 * @param value
+	 *            属性值 比如post
+	 * @return 获得 enum constant
+	 * @throws IllegalArgumentException
+	 *             if Validator.isNullOrEmpty(enumClass) or Validator.isNullOrEmpty(propertyName)
+	 * @throws NoSuchFieldException
+	 *             找不到匹配的枚举
+	 * @throws BeanUtilException
+	 *             the bean util exception
+	 * @since 1.0.8
+	 */
+	public static <E extends Enum<E>> E getEnumByPropertyValue(Class<E> enumClass,String propertyName,String value)
+			throws IllegalArgumentException,NoSuchFieldException,BeanUtilException{
+		boolean ignoreCase = false;
+		return _getEnumByPropertyValue(enumClass, propertyName, value, ignoreCase);
+	}
+
+	/**
+	 * 通过fieldName的 value 获得枚举<br>
+	 * 
+	 * <pre>
+	 * 
+	 * 适用于这种{@link HttpMethodType} 待自定义属性的枚举类型,调用方式:
+	 * 
+	 * {@code
+	 * 	EnumUtil.getEnumByField(HttpMethodType.class, "method", "get")
+	 * }
+	 * </pre>
+	 * 
+	 * @param <E>
+	 *            the element type
+	 * @param enumClass
+	 *            the enum class 比如 {@link HttpMethodType}
+	 * @param propertyName
+	 *            字段名称,比如 {@link HttpMethodType}的method,按照javabean 规范
+	 * @param value
+	 *            属性值 比如post
+	 * @param ignoreCase
+	 *            是否忽视大小写
+	 * @return 获得 enum constant
+	 * @throws IllegalArgumentException
+	 *             if Validator.isNullOrEmpty(enumClass) or Validator.isNullOrEmpty(propertyName)
+	 * @throws NoSuchFieldException
+	 *             找不到匹配的枚举
+	 * @throws BeanUtilException
+	 *             the bean util exception
+	 * @see com.feilong.commons.core.bean.BeanUtil#getProperty(Object, String)
+	 * @since 1.0.8
+	 */
+	private static <E extends Enum<E>> E _getEnumByPropertyValue(Class<E> enumClass,String propertyName,String value,boolean ignoreCase)
+			throws IllegalArgumentException,NoSuchFieldException,BeanUtilException{
+
+		if (Validator.isNullOrEmpty(enumClass)){
+			throw new IllegalArgumentException("enumClass is null or empty!");
 		}
 
-		if (Validator.isNotNullOrEmpty(value)){
+		if (Validator.isNullOrEmpty(propertyName)){
+			throw new IllegalArgumentException("the fieldName is null or empty!");
+		}
 
-			// An enum is a kind of class
-			// and an annotation is a kind of interface
-			// 如果此 Class 对象不表示枚举类型，则返回枚举类的元素或 null。
-			E[] enumConstants = enumClass.getEnumConstants();
+		// An enum is a kind of class
+		// and an annotation is a kind of interface
+		// 如果此 Class 对象不表示枚举类型，则返回枚举类的元素或 null。
+		E[] enumConstants = enumClass.getEnumConstants();
 
-			try{
-				for (E e : enumConstants){
-					String getterMethodName = StringUtil.getGetterMethodName(fieldName);
-					Object invokeMethod = ReflectUtil.invokeMethod(e, getterMethodName);
+		for (E e : enumConstants){
+			String property = BeanUtil.getProperty(e, propertyName);
 
-					if (log.isInfoEnabled()){
-						log.info("invokeMethod value:{}", invokeMethod);
-					}
-					if (value.equalsIgnoreCase(invokeMethod.toString())){
-						return e;
-					}
-				}
-			}catch (IllegalArgumentException e){
-				e.printStackTrace();
-			}catch (SecurityException e){
-				e.printStackTrace();
-			}catch (IllegalAccessException e){
-				e.printStackTrace();
-			}catch (InvocationTargetException e){
-				e.printStackTrace();
-			}catch (NoSuchMethodException e){
-				e.printStackTrace();
+			if (log.isInfoEnabled()){
+				log.info("" + JsonUtil.format(e));
 			}
+			String string = property.toString();
+
+			boolean isMatch = false;
+
+			if (ignoreCase){
+				isMatch = string.equalsIgnoreCase(value);
+			}else{
+				isMatch = string.equals(value);
+			}
+			if (isMatch){
+				return e;
+			}
 		}
-		return null;
+		throw new NoSuchFieldException("can not found the enum constants,enumClass:[" + enumClass + "],propertyName:[" + propertyName
+				+ "],value:[" + value + "],ignoreCase:[" + ignoreCase + "]");
 	}
 }
Index: mp2-web/mp2-web-marketplace/mp2-web-marketplace-trade/src/main/resources/spring/payment/payment/spring-payment-adaptor.xml
===================================================================
--- mp2-web/mp2-web-marketplace/mp2-web-marketplace-trade/src/main/resources/spring/payment/payment/spring-payment-adaptor.xml	(revision 11560)
+++ mp2-web/mp2-web-marketplace/mp2-web-marketplace-trade/src/main/resources/spring/payment/payment/spring-payment-adaptor.xml	(working copy)
@@ -16,6 +16,8 @@
 
 				<entry key="bca_klikpay" value-ref="sprintAsiaKlikPayAdaptor"></entry>
 				<entry key="bca_creditcard" value-ref="sprintAsiaCreditCardAdaptor"></entry>
+				
+				<entry key="bca_tcash" value-ref="tcashPayAdaptor"></entry>
 			</map>
 		</property>
 	</bean>
@@ -34,4 +36,7 @@
 
 	<!-- sprintasia-creditCard -->
 	<import resource="classpath:spring/payment/payment/adaptor-sprintasia-creditCard.xml" />
+
+	<!-- tcash -->
+	<import resource="classpath:spring/payment/payment/adaptor-tcash.xml" />
 </beans>
\ No newline at end of file
Index: mp2-commons/src/main/java/com/baozun/mp2/bean/BeanUtil.java
===================================================================
--- mp2-commons/src/main/java/com/baozun/mp2/bean/BeanUtil.java	(revision 0)
+++ mp2-commons/src/main/java/com/baozun/mp2/bean/BeanUtil.java	(working copy)
@@ -0,0 +1,524 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.mp2.bean;
+
+import java.util.Map;
+
+import org.apache.commons.beanutils.BeanUtils;
+import org.apache.commons.beanutils.BeanUtilsBean;
+import org.apache.commons.beanutils.PropertyUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.baozun.mp2.util.Validator;
+
+/**
+ * 封装了 org.apache.commons.beanutils包下面的类
+ * 
+ * 
+ * <p>
+ * 
+ * 这里使用偷懒的做法,调用了 {@link org.apache.commons.beanutils.ConvertUtilsBean#register(boolean, boolean, int)}方法<br>
+ * 但是有后遗症,这是beanUtils核心公共的方法,可能会影响其他框架或者其他作者开发的代码<br>
+ * 最正确的做法, 自定义的类,自己单独写 {@link org.apache.commons.beanutils.Converter},<br>
+ * 而 公共的类 比如 下面方法里面的类型:
+ * 
+ * <ul>
+ * <li>registerPrimitives(throwException);</li>
+ * <li>registerStandard(throwException, defaultNull);</li>
+ * <li>registerOther(throwException);</li>
+ * <li>registerArrays(throwException, defaultArraySize);</li>
+ * </ul>
+ * 
+ * 最好在用的时候 自行register,{@link org.apache.commons.beanutils.ConvertUtilsBean#deregister(Class)}
+ * 
+ * Example 1:
+ * 
+ * <pre>
+ * 
+ * MyObject myObject = new MyObject();
+ * myObject.setId(3l);
+ * myObject.setName(&quot;My Name&quot;);
+ * 
+ * ConvertUtilsBean cub = new ConvertUtilsBean();
+ * cub.deregister(Long.class);
+ * cub.register(new MyLongConverter(), Long.class);
+ * 
+ * System.out.println(cub.lookup(Long.class));
+ * 
+ * BeanUtilsBean bub = new BeanUtilsBean(cub, new PropertyUtilsBean());
+ * 
+ * String name = bub.getProperty(myObject, &quot;name&quot;);
+ * System.out.println(name);
+ * String id = bub.getProperty(myObject, &quot;id&quot;);
+ * System.out.println(id);
+ * 
+ * </pre>
+ * 
+ * </p>
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 2010-7-9 下午02:44:36
+ * @version 2012-5-15 15:07
+ * @version 1.0.7 2014年5月21日 下午12:24:53 move to om.feilong.commons.core.bean package
+ * @version 1.0.8 2014-7-22 12:37 将异常转成 BeanUtilException 抛出
+ * @see org.apache.commons.beanutils.BeanUtils
+ * @see com.feilong.commons.core.bean.PropertyUtil
+ * @see java.beans.BeanInfo
+ * @see java.beans.PropertyDescriptor
+ * @see java.beans.MethodDescriptor
+ * @since 1.0.0
+ */
+public final class BeanUtil{
+
+	/** The Constant log. */
+	@SuppressWarnings("unused")
+	private final static Logger	log	= LoggerFactory.getLogger(BeanUtil.class);
+
+	/** Don't let anyone instantiate this class. */
+	private BeanUtil(){}
+
+	static{
+		//ConvertUtils.register(new DatePatternConverter(DatePattern.commonWithMillisecond), java.util.Date.class);
+		//ConvertUtils.register(new DatePatternConverter(DatePattern.commonWithMillisecond), java.sql.Date.class);
+		//ConvertUtils.register(new DatePatternConverter(DatePattern.commonWithMillisecond), java.sql.Timestamp.class);
+		//ConvertUtils.register(new BigDecimalConverter(null), java.math.BigDecimal.class);
+
+		boolean throwException = false;
+		boolean defaultNull = true;
+		int defaultArraySize = 10;
+
+		BeanUtilsBean.getInstance().getConvertUtils().register(throwException, defaultNull, defaultArraySize);
+	}
+
+	// [start] cloneBean
+
+	/**
+	 * 调用 {@link BeanUtils#cloneBean(Object)},<br>
+	 * 这个方法通过默认构造函数建立一个bean的新实例,然后拷贝每一个属性到这个新的bean中<br>
+	 * 
+	 * <p>
+	 * {@link BeanUtils#cloneBean(Object)} 在源码上看是调用了 getPropertyUtils().copyProperties(newBean, bean);<br>
+	 * 最后实际上还是<b>复制的引用 ，无法实现深clone</b><br>
+	 * </p>
+	 * 
+	 * <p>
+	 * 但还是可以帮助我们减少工作量的，假如类的属性不是基础类型的话（即自定义类），可以先clone出那个自定义类，在把他付给新的类，覆盖原来类的引用,<br>
+	 * 是为那些本身没有实现clone方法的类准备的 
+	 * </p>
+	 * 
+	 * @param <T>
+	 * 
+	 * @param bean
+	 *            Bean to be cloned
+	 * @return the cloned bean
+	 *         (复制的引用 ，无法实现深clone)
+	 * @throws BeanUtilException
+	 *             if IllegalAccessException | InstantiationException | InvocationTargetException | NoSuchMethodException
+	 * @see org.apache.commons.beanutils.BeanUtils#cloneBean(Object)
+	 * @see org.apache.commons.beanutils.PropertyUtilsBean#copyProperties(Object, Object)
+	 * @since 1.0
+	 */
+	public static <T> T cloneBean(T bean) throws BeanUtilException{
+		try{
+			//BeanUtils.createCache();
+
+			//Clone a bean based on the available property getters and setters, even if the bean class itself does not implement Cloneable.
+			@SuppressWarnings("unchecked")
+			T cloneBean = (T) BeanUtils.cloneBean(bean);
+			return cloneBean;
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+
+	// [end]
+
+	// [start] describe 把Bean的属性值放入到一个Map里面
+
+	/**
+	 * <p>
+	 * 把Bean的属性值放入到一个Map里面。
+	 * </p>
+	 * 
+	 * 这个方法返回一个Object中所有的可读属性，并将属性名/属性值放入一个Map中，<br>
+	 * 另外还有一个名为class的属性，属性值是Object的类名，事实上class是java.lang.Object的一个属性
+	 * 
+	 * @param bean
+	 *            Bean whose properties are to be extracted
+	 * 
+	 * @return Map of property descriptors
+	 * 
+	 * @throws BeanUtilException
+	 *             the bean util exception
+	 * @see org.apache.commons.beanutils.BeanUtils#describe(Object)
+	 * @see org.apache.commons.beanutils.PropertyUtils#describe(Object)
+	 * @see com.feilong.commons.core.bean.PropertyUtil#describe(Object)
+	 */
+	public static Map<String, String> describe(Object bean) throws BeanUtilException{
+		//Return the entire set of properties for which the specified bean provides a read method.
+		try{
+			Map<String, String> map = BeanUtils.describe(bean);
+			return map;
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+
+	}
+
+	// [end]
+
+	// [start] populate 把properties/map里面的值放入bean中
+
+	/**
+	 * 把properties/map里面的值放入bean中.
+	 * 
+	 * @param bean
+	 *            JavaBean whose properties are being populated
+	 * 
+	 * @param properties
+	 *            Map keyed by property name, with the corresponding (String or String[]) value(s) to be set
+	 * 
+	 * @throws BeanUtilException
+	 *             the bean util exception
+	 * @see org.apache.commons.beanutils.BeanUtils#populate(Object, Map)
+	 */
+	public static void populate(Object bean,Map<String, ?> properties) throws BeanUtilException{
+		try{
+			BeanUtils.populate(bean, properties);
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+
+	// [end]
+
+	// [start] copyProperties
+	/**
+	 * 对象Properties的复制,调用了 {@link BeanUtils#copyProperties(Object, Object)}<br>
+	 * 注意:这种copy都是浅拷贝，复制后的2个Bean的同一个属性可能拥有同一个对象的ref，<br>
+	 * 这个在使用时要小心，特别是对于属性为自定义类的情况 .
+	 * 
+	 * <h4>{@link BeanUtils#copyProperties(Object, Object)}与 {@link PropertyUtils#copyProperties(Object, Object)}区别</h4>
+	 * 
+	 * <blockquote>
+	 * <ul>
+	 * <li>{@link BeanUtils#copyProperties(Object, Object)}能给不同的两个成员变量相同的，但类名不同的两个类之间相互赋值</li>
+	 * <li>{@link PropertyUtils#copyProperties(Object, Object)} 提供类型转换功能，即发现两个JavaBean的同名属性为不同类型时，在支持的数据类型范围内进行转换，而前者不支持这个功能，但是速度会更快一些。</li>
+	 * <li>commons-beanutils v1.9.0以前的版本 BeanUtils 不允许对象的属性值为 null，PropertyUtils 可以拷贝属性值 null 的对象。<br>
+	 * (<b>注:</b>commons-beanutils v1.9.0+修复了这个情况,BeanUtilsBean.copyProperties() no longer throws a ConversionException for null properties
+	 * of certain data types),具体信息,可以参阅commons-beanutils的
+	 * {@link <a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.2/RELEASE-NOTES.txt">RELEASE-NOTES.txt</a>}</li>
+	 * </ul>
+	 * </p>
+	 * </blockquote>
+	 * 
+	 * @param toObj
+	 *            目标对象
+	 * @param fromObj
+	 *            原始对象
+	 * @throws BeanUtilException
+	 *             the bean util exception
+	 * @see org.apache.commons.beanutils.BeanUtils#copyProperties(Object, Object)
+	 * @see org.apache.commons.beanutils.BeanUtils#copyProperty(Object, String, Object)
+	 */
+	public static void copyProperties(Object toObj,Object fromObj) throws BeanUtilException{
+		if (null == toObj){
+			throw new IllegalArgumentException("No destination bean/toObj specified");
+		}
+		if (null == fromObj){
+			throw new IllegalArgumentException("No origin bean/fromObj specified");
+		}
+		try{
+			BeanUtils.copyProperties(toObj, fromObj);
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+
+	/**
+	 * 对象值的复制 {@code fromObj-->toObj}
+	 * 
+	 * <pre>
+	 * 如果有java.util.Date 类型的 需要copy,那么 需要先这么着
+	 * DateConverter converter = new DateConverter(DatePattern.forToString, Locale.US);
+	 * ConvertUtils.register(converter, Date.class);
+	 * 或者 使用 内置的
+	 * ConvertUtils.register(new DateLocaleConverter(Locale.US, DatePattern.forToString), Date.class); *
+	 * 
+	 * BeanUtil.copyProperty(b, a, &quot;date&quot;);
+	 * </pre>
+	 * 
+	 * <pre>
+	 * 例如两个pojo:enterpriseSales和enterpriseSales_form 都含有字段&quot;enterpriseName&quot;,&quot;linkMan&quot;,&quot;phone&quot;
+	 * 通常写法
+	 * enterpriseSales.setEnterpriseName(enterpriseSales_form.getEnterpriseName());
+	 * enterpriseSales.setLinkMan(enterpriseSales_form.getLinkMan());
+	 * enterpriseSales.setPhone(enterpriseSales_form.getPhone());
+	 * 此时,可以使用
+	 * BeanUtil.copyProperties(enterpriseSales,enterpriseSales_form,new
+	 * String[]{&quot;enterpriseName&quot;,&quot;linkMan&quot;,&quot;phone&quot;});
+	 * </pre>
+	 * 
+	 * @param toObj
+	 *            目标对象
+	 * @param fromObj
+	 *            原始对象
+	 * @param filedNames
+	 *            字段数组, can't be null/empty!
+	 * @throws BeanUtilException
+	 *             the bean util exception
+	 * @see #copyProperty(Object, Object, String)
+	 */
+	public static void copyProperties(Object toObj,Object fromObj,String[] filedNames) throws BeanUtilException{
+		if (Validator.isNullOrEmpty(filedNames)){
+			throw new NullPointerException("filedNames can't be null/empty!");
+		}
+
+		int length = filedNames.length;
+		for (int i = 0; i < length; ++i){
+			String filedName = filedNames[i];
+			copyProperty(toObj, fromObj, filedName);
+		}
+	}
+
+	// [end]
+
+	// [start] copyProperty
+	/**
+	 * 对象值的复制 {@code fromObj-->toObj}
+	 * 
+	 * <pre>
+	 * 如果有java.util.Date 类型的 需要copy,那么 需要先这么着
+	 * DateConverter converter = new DateConverter(DatePattern.forToString, Locale.US);
+	 * ConvertUtils.register(converter, Date.class);
+	 * 或者 使用 内置的
+	 * ConvertUtils.register(new DateLocaleConverter(Locale.US, DatePattern.forToString), Date.class); *
+	 * 
+	 * BeanUtil.copyProperty(b, a, &quot;date&quot;);
+	 * </pre>
+	 * 
+	 * <pre>
+	 * 例如两个pojo:enterpriseSales和enterpriseSales_form 都含有字段&quot;enterpriseName&quot;
+	 * 通常写法
+	 * enterpriseSales.setEnterpriseName(enterpriseSales_form.getEnterpriseName());
+	 * 
+	 * 此时,可以使用
+	 * BeanUtil.copyProperty(enterpriseSales,enterpriseSales_form,&quot;enterpriseName&quot;);
+	 * </pre>
+	 * 
+	 * @param toObj
+	 *            目标对象
+	 * @param fromObj
+	 *            原始对象
+	 * @param filedName
+	 *            字段名称
+	 * @throws BeanUtilException
+	 *             the bean util exception
+	 * @see #getProperty(Object, String)
+	 * @see #copyProperty(Object, String, Object)
+	 */
+	public static void copyProperty(Object toObj,Object fromObj,String filedName) throws BeanUtilException{
+		Object value = getProperty(fromObj, filedName);
+		copyProperty(toObj, filedName, value);
+	}
+
+	/**
+	 * bean中的成员变量name赋值为value<br>
+	 * 
+	 * <pre>
+	 * 如果有java.util.Date 类型的 需要copy,那么 需要先这么着
+	 * DateConverter converter = new DateConverter(DatePattern.forToString, Locale.US);
+	 * ConvertUtils.register(converter, Date.class);
+	 * BeanUtil.copyProperty(b, a, &quot;date&quot;);
+	 * </pre>
+	 * 
+	 * <pre>
+	 * 嵌套赋值: BeanUtils.copyProperty(a, &quot;sample.display&quot;, &quot;second one&quot;);
+	 * 
+	 * 功能和setProperty一样
+	 * 
+	 * 如果我们只是为bean的属性赋值的话,使用copyProperty()就可以了;
+	 * 而setProperty()方法是实现BeanUtils.populate()(后面会说到)机制的基础,也就是说如果我们需要自定义实现populate()方法,那么我们可以override setProperty()方法.
+	 * 所以,做为一般的日常使用,setProperty()方法是不推荐使用的.
+	 * 
+	 * </pre>
+	 * 
+	 * @param bean
+	 *            bean
+	 * @param propertyName
+	 *            成员Property name (can be nested/indexed/mapped/combo)
+	 * @param value
+	 *            赋值为value
+	 * @throws BeanUtilException
+	 *             the bean util exception
+	 * @see org.apache.commons.beanutils.BeanUtils#copyProperty(Object, String, Object)
+	 */
+	public static void copyProperty(Object bean,String propertyName,Object value) throws BeanUtilException{
+		try{
+			BeanUtils.copyProperty(bean, propertyName, value);
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+
+	// [end]
+
+	// [start] setProperty
+
+	/**
+	 * 使用 {@link BeanUtils#setProperty(Object, String, Object)} 来设置属性值(<b>会进行类型转换</b>).
+	 * 
+	 * <pre>
+	 * 
+	 * BeanUtils.setProperty(pt1, &quot;x&quot;, &quot;9&quot;); // 这里的9是String类型
+	 * PropertyUtils.setProperty(pt1, &quot;x&quot;, 9); // 这里的是int类型
+	 * // 这两个类BeanUtils和PropertyUtils,前者能自动将int类型转化，后者不能
+	 * </pre>
+	 * 
+	 * 
+	 * <pre>
+	 * {@code
+	 * getProperty和setProperty,它们都只有2个参数，第一个是JavaBean对象，第二个是要操作的属性名。
+	 * Company c = new Company();
+	 * c.setName("Simple");
+	 *  
+	 * 对于Simple类型，参数二直接是属性名即可
+	 * //Simple
+	 * System.out.println(BeanUtils.getProperty(c, "name"));
+	 *  
+	 * 对于Map类型，则需要以“属性名（key值）”的形式
+	 * //Map
+	 *     System.out.println(BeanUtils.getProperty(c, "address (A2)"));
+	 *     HashMap am = new HashMap();
+	 *     am.put("1","234-222-1222211");
+	 *     am.put("2","021-086-1232323");
+	 *     BeanUtils.setProperty(c,"telephone",am);
+	 * System.out.println(BeanUtils.getProperty(c, "telephone (2)"));
+	 *  
+	 * 对于Indexed，则为“属性名[索引值]”，注意这里对于ArrayList和数组都可以用一样的方式进行操作。
+	 * //index
+	 *     System.out.println(BeanUtils.getProperty(c, "otherInfo[2]"));
+	 *     BeanUtils.setProperty(c, "product[1]", "NOTES SERVER");
+	 *     System.out.println(BeanUtils.getProperty(c, "product[1]"));
+	 *  
+	 * 当然这3种类也可以组合使用啦！
+	 * //nest
+	 *     System.out.println(BeanUtils.getProperty(c, "employee[1].name"));
+	 * 
+	 * }
+	 * </pre>
+	 * 
+	 * @param bean
+	 *            Bean on which setting is to be performed
+	 * @param name
+	 *            Property name (can be nested/indexed/mapped/combo)
+	 * @param value
+	 *            Value to be set
+	 * @throws BeanUtilException
+	 *             if IllegalAccessException | InvocationTargetException
+	 * @see org.apache.commons.beanutils.BeanUtils#setProperty(Object, String, Object)
+	 * @see org.apache.commons.beanutils.PropertyUtils#setProperty(Object, String, Object)
+	 * @see com.feilong.commons.core.bean.PropertyUtil#setProperty(Object, String, Object)
+	 */
+	public static void setProperty(Object bean,String name,Object value) throws BeanUtilException{
+		try{
+			// BeanUtils支持把所有类型的属性都作为字符串处理
+			// 在后台自动进行类型转换(字符串和真实类型的转换)
+			BeanUtils.setProperty(bean, name, value);
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+
+	// [end]
+
+	// [start] getProperty
+
+	/**
+	 * 使用 {@link BeanUtils#getProperty(Object, String)} 类从对象中取得属性值.
+	 * 
+	 * <pre>
+	 * {@code
+	 * getProperty和setProperty,它们都只有2个参数，第一个是JavaBean对象，第二个是要操作的属性名。
+	 * Company c = new Company();
+	 * c.setName("Simple");
+	 *  
+	 * 对于Simple类型，参数二直接是属性名即可
+	 * //Simple
+	 * System.out.println(BeanUtils.getProperty(c, "name"));
+	 *  
+	 * 对于Map类型，则需要以“属性名（key值）”的形式
+	 * //Map
+	 *     System.out.println(BeanUtils.getProperty(c, "address (A2)"));
+	 *     HashMap am = new HashMap();
+	 *     am.put("1","234-222-1222211");
+	 *     am.put("2","021-086-1232323");
+	 *     BeanUtils.setProperty(c,"telephone",am);
+	 * System.out.println(BeanUtils.getProperty(c, "telephone (2)"));
+	 *  
+	 * 对于Indexed，则为“属性名[索引值]”，注意这里对于ArrayList和数组都可以用一样的方式进行操作。
+	 * //index
+	 *     System.out.println(BeanUtils.getProperty(c, "otherInfo[2]"));
+	 *     BeanUtils.setProperty(c, "product[1]", "NOTES SERVER");
+	 *     System.out.println(BeanUtils.getProperty(c, "product[1]"));
+	 *  
+	 * 当然这3种类也可以组合使用啦！
+	 * //nest
+	 *     System.out.println(BeanUtils.getProperty(c, "employee[1].name"));
+	 * 
+	 * }
+	 * </pre>
+	 * 
+	 * <h4>{@link BeanUtils#getProperty(Object, String)}&{@link PropertyUtils#getProperty(Object, String)}的区别</h4>
+	 * 
+	 * <blockquote>
+	 * <p>
+	 * {@link BeanUtils#getProperty(Object, String)} 会将结果转成String返回,<br>
+	 * {@link PropertyUtils#getProperty(Object, String)} 结果是Object类型,不会做类型转换
+	 * </p>
+	 * </blockquote>
+	 * 
+	 * @param bean
+	 *            bean
+	 * @param name
+	 *            属性名称
+	 * @return 使用BeanUtils类从对象中取得属性值
+	 * @throws BeanUtilException
+	 *             if IllegalAccessException | InvocationTargetException | NoSuchMethodException
+	 * @see org.apache.commons.beanutils.BeanUtils#getProperty(Object, String)
+	 * @see org.apache.commons.beanutils.PropertyUtils#getProperty(Object, String)
+	 * @see com.feilong.commons.core.bean.PropertyUtil#getProperty(Object, String)
+	 */
+	public static String getProperty(Object bean,String name) throws BeanUtilException{
+		// Return the value of the specified property of the specified bean,
+		// no matter which property reference format is used, as a String.
+		try{
+			String propertyValue = BeanUtils.getProperty(bean, name);
+			return propertyValue;
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+	// [end]
+}
\ No newline at end of file
Index: mp2-commons/src/main/java/com/baozun/mp2/bean/BeanUtil.java
===================================================================
--- mp2-commons/src/main/java/com/baozun/mp2/bean/BeanUtil.java	(revision 0)
+++ mp2-commons/src/main/java/com/baozun/mp2/bean/BeanUtil.java	(working copy)
@@ -0,0 +1,524 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.mp2.bean;
+
+import java.util.Map;
+
+import org.apache.commons.beanutils.BeanUtils;
+import org.apache.commons.beanutils.BeanUtilsBean;
+import org.apache.commons.beanutils.PropertyUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.baozun.mp2.util.Validator;
+
+/**
+ * 封装了 org.apache.commons.beanutils包下面的类
+ * 
+ * 
+ * <p>
+ * 
+ * 这里使用偷懒的做法,调用了 {@link org.apache.commons.beanutils.ConvertUtilsBean#register(boolean, boolean, int)}方法<br>
+ * 但是有后遗症,这是beanUtils核心公共的方法,可能会影响其他框架或者其他作者开发的代码<br>
+ * 最正确的做法, 自定义的类,自己单独写 {@link org.apache.commons.beanutils.Converter},<br>
+ * 而 公共的类 比如 下面方法里面的类型:
+ * 
+ * <ul>
+ * <li>registerPrimitives(throwException);</li>
+ * <li>registerStandard(throwException, defaultNull);</li>
+ * <li>registerOther(throwException);</li>
+ * <li>registerArrays(throwException, defaultArraySize);</li>
+ * </ul>
+ * 
+ * 最好在用的时候 自行register,{@link org.apache.commons.beanutils.ConvertUtilsBean#deregister(Class)}
+ * 
+ * Example 1:
+ * 
+ * <pre>
+ * 
+ * MyObject myObject = new MyObject();
+ * myObject.setId(3l);
+ * myObject.setName(&quot;My Name&quot;);
+ * 
+ * ConvertUtilsBean cub = new ConvertUtilsBean();
+ * cub.deregister(Long.class);
+ * cub.register(new MyLongConverter(), Long.class);
+ * 
+ * System.out.println(cub.lookup(Long.class));
+ * 
+ * BeanUtilsBean bub = new BeanUtilsBean(cub, new PropertyUtilsBean());
+ * 
+ * String name = bub.getProperty(myObject, &quot;name&quot;);
+ * System.out.println(name);
+ * String id = bub.getProperty(myObject, &quot;id&quot;);
+ * System.out.println(id);
+ * 
+ * </pre>
+ * 
+ * </p>
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 2010-7-9 下午02:44:36
+ * @version 2012-5-15 15:07
+ * @version 1.0.7 2014年5月21日 下午12:24:53 move to om.feilong.commons.core.bean package
+ * @version 1.0.8 2014-7-22 12:37 将异常转成 BeanUtilException 抛出
+ * @see org.apache.commons.beanutils.BeanUtils
+ * @see com.feilong.commons.core.bean.PropertyUtil
+ * @see java.beans.BeanInfo
+ * @see java.beans.PropertyDescriptor
+ * @see java.beans.MethodDescriptor
+ * @since 1.0.0
+ */
+public final class BeanUtil{
+
+	/** The Constant log. */
+	@SuppressWarnings("unused")
+	private final static Logger	log	= LoggerFactory.getLogger(BeanUtil.class);
+
+	/** Don't let anyone instantiate this class. */
+	private BeanUtil(){}
+
+	static{
+		//ConvertUtils.register(new DatePatternConverter(DatePattern.commonWithMillisecond), java.util.Date.class);
+		//ConvertUtils.register(new DatePatternConverter(DatePattern.commonWithMillisecond), java.sql.Date.class);
+		//ConvertUtils.register(new DatePatternConverter(DatePattern.commonWithMillisecond), java.sql.Timestamp.class);
+		//ConvertUtils.register(new BigDecimalConverter(null), java.math.BigDecimal.class);
+
+		boolean throwException = false;
+		boolean defaultNull = true;
+		int defaultArraySize = 10;
+
+		BeanUtilsBean.getInstance().getConvertUtils().register(throwException, defaultNull, defaultArraySize);
+	}
+
+	// [start] cloneBean
+
+	/**
+	 * 调用 {@link BeanUtils#cloneBean(Object)},<br>
+	 * 这个方法通过默认构造函数建立一个bean的新实例,然后拷贝每一个属性到这个新的bean中<br>
+	 * 
+	 * <p>
+	 * {@link BeanUtils#cloneBean(Object)} 在源码上看是调用了 getPropertyUtils().copyProperties(newBean, bean);<br>
+	 * 最后实际上还是<b>复制的引用 ，无法实现深clone</b><br>
+	 * </p>
+	 * 
+	 * <p>
+	 * 但还是可以帮助我们减少工作量的，假如类的属性不是基础类型的话（即自定义类），可以先clone出那个自定义类，在把他付给新的类，覆盖原来类的引用,<br>
+	 * 是为那些本身没有实现clone方法的类准备的 
+	 * </p>
+	 * 
+	 * @param <T>
+	 * 
+	 * @param bean
+	 *            Bean to be cloned
+	 * @return the cloned bean
+	 *         (复制的引用 ，无法实现深clone)
+	 * @throws BeanUtilException
+	 *             if IllegalAccessException | InstantiationException | InvocationTargetException | NoSuchMethodException
+	 * @see org.apache.commons.beanutils.BeanUtils#cloneBean(Object)
+	 * @see org.apache.commons.beanutils.PropertyUtilsBean#copyProperties(Object, Object)
+	 * @since 1.0
+	 */
+	public static <T> T cloneBean(T bean) throws BeanUtilException{
+		try{
+			//BeanUtils.createCache();
+
+			//Clone a bean based on the available property getters and setters, even if the bean class itself does not implement Cloneable.
+			@SuppressWarnings("unchecked")
+			T cloneBean = (T) BeanUtils.cloneBean(bean);
+			return cloneBean;
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+
+	// [end]
+
+	// [start] describe 把Bean的属性值放入到一个Map里面
+
+	/**
+	 * <p>
+	 * 把Bean的属性值放入到一个Map里面。
+	 * </p>
+	 * 
+	 * 这个方法返回一个Object中所有的可读属性，并将属性名/属性值放入一个Map中，<br>
+	 * 另外还有一个名为class的属性，属性值是Object的类名，事实上class是java.lang.Object的一个属性
+	 * 
+	 * @param bean
+	 *            Bean whose properties are to be extracted
+	 * 
+	 * @return Map of property descriptors
+	 * 
+	 * @throws BeanUtilException
+	 *             the bean util exception
+	 * @see org.apache.commons.beanutils.BeanUtils#describe(Object)
+	 * @see org.apache.commons.beanutils.PropertyUtils#describe(Object)
+	 * @see com.feilong.commons.core.bean.PropertyUtil#describe(Object)
+	 */
+	public static Map<String, String> describe(Object bean) throws BeanUtilException{
+		//Return the entire set of properties for which the specified bean provides a read method.
+		try{
+			Map<String, String> map = BeanUtils.describe(bean);
+			return map;
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+
+	}
+
+	// [end]
+
+	// [start] populate 把properties/map里面的值放入bean中
+
+	/**
+	 * 把properties/map里面的值放入bean中.
+	 * 
+	 * @param bean
+	 *            JavaBean whose properties are being populated
+	 * 
+	 * @param properties
+	 *            Map keyed by property name, with the corresponding (String or String[]) value(s) to be set
+	 * 
+	 * @throws BeanUtilException
+	 *             the bean util exception
+	 * @see org.apache.commons.beanutils.BeanUtils#populate(Object, Map)
+	 */
+	public static void populate(Object bean,Map<String, ?> properties) throws BeanUtilException{
+		try{
+			BeanUtils.populate(bean, properties);
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+
+	// [end]
+
+	// [start] copyProperties
+	/**
+	 * 对象Properties的复制,调用了 {@link BeanUtils#copyProperties(Object, Object)}<br>
+	 * 注意:这种copy都是浅拷贝，复制后的2个Bean的同一个属性可能拥有同一个对象的ref，<br>
+	 * 这个在使用时要小心，特别是对于属性为自定义类的情况 .
+	 * 
+	 * <h4>{@link BeanUtils#copyProperties(Object, Object)}与 {@link PropertyUtils#copyProperties(Object, Object)}区别</h4>
+	 * 
+	 * <blockquote>
+	 * <ul>
+	 * <li>{@link BeanUtils#copyProperties(Object, Object)}能给不同的两个成员变量相同的，但类名不同的两个类之间相互赋值</li>
+	 * <li>{@link PropertyUtils#copyProperties(Object, Object)} 提供类型转换功能，即发现两个JavaBean的同名属性为不同类型时，在支持的数据类型范围内进行转换，而前者不支持这个功能，但是速度会更快一些。</li>
+	 * <li>commons-beanutils v1.9.0以前的版本 BeanUtils 不允许对象的属性值为 null，PropertyUtils 可以拷贝属性值 null 的对象。<br>
+	 * (<b>注:</b>commons-beanutils v1.9.0+修复了这个情况,BeanUtilsBean.copyProperties() no longer throws a ConversionException for null properties
+	 * of certain data types),具体信息,可以参阅commons-beanutils的
+	 * {@link <a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.2/RELEASE-NOTES.txt">RELEASE-NOTES.txt</a>}</li>
+	 * </ul>
+	 * </p>
+	 * </blockquote>
+	 * 
+	 * @param toObj
+	 *            目标对象
+	 * @param fromObj
+	 *            原始对象
+	 * @throws BeanUtilException
+	 *             the bean util exception
+	 * @see org.apache.commons.beanutils.BeanUtils#copyProperties(Object, Object)
+	 * @see org.apache.commons.beanutils.BeanUtils#copyProperty(Object, String, Object)
+	 */
+	public static void copyProperties(Object toObj,Object fromObj) throws BeanUtilException{
+		if (null == toObj){
+			throw new IllegalArgumentException("No destination bean/toObj specified");
+		}
+		if (null == fromObj){
+			throw new IllegalArgumentException("No origin bean/fromObj specified");
+		}
+		try{
+			BeanUtils.copyProperties(toObj, fromObj);
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+
+	/**
+	 * 对象值的复制 {@code fromObj-->toObj}
+	 * 
+	 * <pre>
+	 * 如果有java.util.Date 类型的 需要copy,那么 需要先这么着
+	 * DateConverter converter = new DateConverter(DatePattern.forToString, Locale.US);
+	 * ConvertUtils.register(converter, Date.class);
+	 * 或者 使用 内置的
+	 * ConvertUtils.register(new DateLocaleConverter(Locale.US, DatePattern.forToString), Date.class); *
+	 * 
+	 * BeanUtil.copyProperty(b, a, &quot;date&quot;);
+	 * </pre>
+	 * 
+	 * <pre>
+	 * 例如两个pojo:enterpriseSales和enterpriseSales_form 都含有字段&quot;enterpriseName&quot;,&quot;linkMan&quot;,&quot;phone&quot;
+	 * 通常写法
+	 * enterpriseSales.setEnterpriseName(enterpriseSales_form.getEnterpriseName());
+	 * enterpriseSales.setLinkMan(enterpriseSales_form.getLinkMan());
+	 * enterpriseSales.setPhone(enterpriseSales_form.getPhone());
+	 * 此时,可以使用
+	 * BeanUtil.copyProperties(enterpriseSales,enterpriseSales_form,new
+	 * String[]{&quot;enterpriseName&quot;,&quot;linkMan&quot;,&quot;phone&quot;});
+	 * </pre>
+	 * 
+	 * @param toObj
+	 *            目标对象
+	 * @param fromObj
+	 *            原始对象
+	 * @param filedNames
+	 *            字段数组, can't be null/empty!
+	 * @throws BeanUtilException
+	 *             the bean util exception
+	 * @see #copyProperty(Object, Object, String)
+	 */
+	public static void copyProperties(Object toObj,Object fromObj,String[] filedNames) throws BeanUtilException{
+		if (Validator.isNullOrEmpty(filedNames)){
+			throw new NullPointerException("filedNames can't be null/empty!");
+		}
+
+		int length = filedNames.length;
+		for (int i = 0; i < length; ++i){
+			String filedName = filedNames[i];
+			copyProperty(toObj, fromObj, filedName);
+		}
+	}
+
+	// [end]
+
+	// [start] copyProperty
+	/**
+	 * 对象值的复制 {@code fromObj-->toObj}
+	 * 
+	 * <pre>
+	 * 如果有java.util.Date 类型的 需要copy,那么 需要先这么着
+	 * DateConverter converter = new DateConverter(DatePattern.forToString, Locale.US);
+	 * ConvertUtils.register(converter, Date.class);
+	 * 或者 使用 内置的
+	 * ConvertUtils.register(new DateLocaleConverter(Locale.US, DatePattern.forToString), Date.class); *
+	 * 
+	 * BeanUtil.copyProperty(b, a, &quot;date&quot;);
+	 * </pre>
+	 * 
+	 * <pre>
+	 * 例如两个pojo:enterpriseSales和enterpriseSales_form 都含有字段&quot;enterpriseName&quot;
+	 * 通常写法
+	 * enterpriseSales.setEnterpriseName(enterpriseSales_form.getEnterpriseName());
+	 * 
+	 * 此时,可以使用
+	 * BeanUtil.copyProperty(enterpriseSales,enterpriseSales_form,&quot;enterpriseName&quot;);
+	 * </pre>
+	 * 
+	 * @param toObj
+	 *            目标对象
+	 * @param fromObj
+	 *            原始对象
+	 * @param filedName
+	 *            字段名称
+	 * @throws BeanUtilException
+	 *             the bean util exception
+	 * @see #getProperty(Object, String)
+	 * @see #copyProperty(Object, String, Object)
+	 */
+	public static void copyProperty(Object toObj,Object fromObj,String filedName) throws BeanUtilException{
+		Object value = getProperty(fromObj, filedName);
+		copyProperty(toObj, filedName, value);
+	}
+
+	/**
+	 * bean中的成员变量name赋值为value<br>
+	 * 
+	 * <pre>
+	 * 如果有java.util.Date 类型的 需要copy,那么 需要先这么着
+	 * DateConverter converter = new DateConverter(DatePattern.forToString, Locale.US);
+	 * ConvertUtils.register(converter, Date.class);
+	 * BeanUtil.copyProperty(b, a, &quot;date&quot;);
+	 * </pre>
+	 * 
+	 * <pre>
+	 * 嵌套赋值: BeanUtils.copyProperty(a, &quot;sample.display&quot;, &quot;second one&quot;);
+	 * 
+	 * 功能和setProperty一样
+	 * 
+	 * 如果我们只是为bean的属性赋值的话,使用copyProperty()就可以了;
+	 * 而setProperty()方法是实现BeanUtils.populate()(后面会说到)机制的基础,也就是说如果我们需要自定义实现populate()方法,那么我们可以override setProperty()方法.
+	 * 所以,做为一般的日常使用,setProperty()方法是不推荐使用的.
+	 * 
+	 * </pre>
+	 * 
+	 * @param bean
+	 *            bean
+	 * @param propertyName
+	 *            成员Property name (can be nested/indexed/mapped/combo)
+	 * @param value
+	 *            赋值为value
+	 * @throws BeanUtilException
+	 *             the bean util exception
+	 * @see org.apache.commons.beanutils.BeanUtils#copyProperty(Object, String, Object)
+	 */
+	public static void copyProperty(Object bean,String propertyName,Object value) throws BeanUtilException{
+		try{
+			BeanUtils.copyProperty(bean, propertyName, value);
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+
+	// [end]
+
+	// [start] setProperty
+
+	/**
+	 * 使用 {@link BeanUtils#setProperty(Object, String, Object)} 来设置属性值(<b>会进行类型转换</b>).
+	 * 
+	 * <pre>
+	 * 
+	 * BeanUtils.setProperty(pt1, &quot;x&quot;, &quot;9&quot;); // 这里的9是String类型
+	 * PropertyUtils.setProperty(pt1, &quot;x&quot;, 9); // 这里的是int类型
+	 * // 这两个类BeanUtils和PropertyUtils,前者能自动将int类型转化，后者不能
+	 * </pre>
+	 * 
+	 * 
+	 * <pre>
+	 * {@code
+	 * getProperty和setProperty,它们都只有2个参数，第一个是JavaBean对象，第二个是要操作的属性名。
+	 * Company c = new Company();
+	 * c.setName("Simple");
+	 *  
+	 * 对于Simple类型，参数二直接是属性名即可
+	 * //Simple
+	 * System.out.println(BeanUtils.getProperty(c, "name"));
+	 *  
+	 * 对于Map类型，则需要以“属性名（key值）”的形式
+	 * //Map
+	 *     System.out.println(BeanUtils.getProperty(c, "address (A2)"));
+	 *     HashMap am = new HashMap();
+	 *     am.put("1","234-222-1222211");
+	 *     am.put("2","021-086-1232323");
+	 *     BeanUtils.setProperty(c,"telephone",am);
+	 * System.out.println(BeanUtils.getProperty(c, "telephone (2)"));
+	 *  
+	 * 对于Indexed，则为“属性名[索引值]”，注意这里对于ArrayList和数组都可以用一样的方式进行操作。
+	 * //index
+	 *     System.out.println(BeanUtils.getProperty(c, "otherInfo[2]"));
+	 *     BeanUtils.setProperty(c, "product[1]", "NOTES SERVER");
+	 *     System.out.println(BeanUtils.getProperty(c, "product[1]"));
+	 *  
+	 * 当然这3种类也可以组合使用啦！
+	 * //nest
+	 *     System.out.println(BeanUtils.getProperty(c, "employee[1].name"));
+	 * 
+	 * }
+	 * </pre>
+	 * 
+	 * @param bean
+	 *            Bean on which setting is to be performed
+	 * @param name
+	 *            Property name (can be nested/indexed/mapped/combo)
+	 * @param value
+	 *            Value to be set
+	 * @throws BeanUtilException
+	 *             if IllegalAccessException | InvocationTargetException
+	 * @see org.apache.commons.beanutils.BeanUtils#setProperty(Object, String, Object)
+	 * @see org.apache.commons.beanutils.PropertyUtils#setProperty(Object, String, Object)
+	 * @see com.feilong.commons.core.bean.PropertyUtil#setProperty(Object, String, Object)
+	 */
+	public static void setProperty(Object bean,String name,Object value) throws BeanUtilException{
+		try{
+			// BeanUtils支持把所有类型的属性都作为字符串处理
+			// 在后台自动进行类型转换(字符串和真实类型的转换)
+			BeanUtils.setProperty(bean, name, value);
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+
+	// [end]
+
+	// [start] getProperty
+
+	/**
+	 * 使用 {@link BeanUtils#getProperty(Object, String)} 类从对象中取得属性值.
+	 * 
+	 * <pre>
+	 * {@code
+	 * getProperty和setProperty,它们都只有2个参数，第一个是JavaBean对象，第二个是要操作的属性名。
+	 * Company c = new Company();
+	 * c.setName("Simple");
+	 *  
+	 * 对于Simple类型，参数二直接是属性名即可
+	 * //Simple
+	 * System.out.println(BeanUtils.getProperty(c, "name"));
+	 *  
+	 * 对于Map类型，则需要以“属性名（key值）”的形式
+	 * //Map
+	 *     System.out.println(BeanUtils.getProperty(c, "address (A2)"));
+	 *     HashMap am = new HashMap();
+	 *     am.put("1","234-222-1222211");
+	 *     am.put("2","021-086-1232323");
+	 *     BeanUtils.setProperty(c,"telephone",am);
+	 * System.out.println(BeanUtils.getProperty(c, "telephone (2)"));
+	 *  
+	 * 对于Indexed，则为“属性名[索引值]”，注意这里对于ArrayList和数组都可以用一样的方式进行操作。
+	 * //index
+	 *     System.out.println(BeanUtils.getProperty(c, "otherInfo[2]"));
+	 *     BeanUtils.setProperty(c, "product[1]", "NOTES SERVER");
+	 *     System.out.println(BeanUtils.getProperty(c, "product[1]"));
+	 *  
+	 * 当然这3种类也可以组合使用啦！
+	 * //nest
+	 *     System.out.println(BeanUtils.getProperty(c, "employee[1].name"));
+	 * 
+	 * }
+	 * </pre>
+	 * 
+	 * <h4>{@link BeanUtils#getProperty(Object, String)}&{@link PropertyUtils#getProperty(Object, String)}的区别</h4>
+	 * 
+	 * <blockquote>
+	 * <p>
+	 * {@link BeanUtils#getProperty(Object, String)} 会将结果转成String返回,<br>
+	 * {@link PropertyUtils#getProperty(Object, String)} 结果是Object类型,不会做类型转换
+	 * </p>
+	 * </blockquote>
+	 * 
+	 * @param bean
+	 *            bean
+	 * @param name
+	 *            属性名称
+	 * @return 使用BeanUtils类从对象中取得属性值
+	 * @throws BeanUtilException
+	 *             if IllegalAccessException | InvocationTargetException | NoSuchMethodException
+	 * @see org.apache.commons.beanutils.BeanUtils#getProperty(Object, String)
+	 * @see org.apache.commons.beanutils.PropertyUtils#getProperty(Object, String)
+	 * @see com.feilong.commons.core.bean.PropertyUtil#getProperty(Object, String)
+	 */
+	public static String getProperty(Object bean,String name) throws BeanUtilException{
+		// Return the value of the specified property of the specified bean,
+		// no matter which property reference format is used, as a String.
+		try{
+			String propertyValue = BeanUtils.getProperty(bean, name);
+			return propertyValue;
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+	// [end]
+}
\ No newline at end of file
Index: mp2-commons/src/main/java/com/baozun/mp2/bean/BeanUtilException.java
===================================================================
--- mp2-commons/src/main/java/com/baozun/mp2/bean/BeanUtilException.java	(revision 0)
+++ mp2-commons/src/main/java/com/baozun/mp2/bean/BeanUtilException.java	(working copy)
@@ -0,0 +1,91 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.mp2.bean;
+
+import com.baozun.mp2.util.Slf4jUtil;
+
+//Exception又分为两类：一种是CheckedException，一种是UncheckedException。
+//
+//这两种Exception的区别主要是CheckedException需要用try...catch...显示的捕获，
+//而UncheckedException不需要捕获。 通常UncheckedException又叫做RuntimeException。
+//	
+//《effective java》指出：
+//	对于可恢复的条件使用被检查的异常（CheckedException），
+//	对于程序错误（言外之意不可恢复，大错已经酿成）使用运行时异常（RuntimeException）。
+
+/**
+ * 使用 beanutil出现的异常.
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 1.0.8 2014年7月21日 下午5:34:50
+ * @since 1.0.8
+ */
+public final class BeanUtilException extends RuntimeException{
+
+	/** The Constant serialVersionUID. */
+	private static final long	serialVersionUID	= -1699987643831455524L;
+
+	/**
+	 * Instantiates a new bean util exception.
+	 */
+	public BeanUtilException(){
+		super();
+	}
+
+	/**
+	 * Instantiates a new bean util exception.
+	 * 
+	 * @param message
+	 *            the message
+	 */
+	public BeanUtilException(String message){
+		super(message);
+	}
+
+	/**
+	 * Instantiates a new bean util exception.
+	 * 
+	 * @param messagePattern
+	 *            the message pattern
+	 * @param args
+	 *            the args
+	 */
+	public BeanUtilException(String messagePattern, Object...args){
+		super(Slf4jUtil.formatMessage(messagePattern, args));
+	}
+
+	/**
+	 * Instantiates a new bean util exception.
+	 * 
+	 * @param message
+	 *            the message
+	 * @param cause
+	 *            the cause
+	 */
+	public BeanUtilException(String message, Throwable cause){
+		super(message, cause);
+	}
+
+	/**
+	 * Instantiates a new bean util exception.
+	 * 
+	 * @param cause
+	 *            the cause
+	 */
+	public BeanUtilException(Throwable cause){
+		super(cause);
+	}
+}
Index: mp2-commons/src/main/java/com/baozun/mp2/bean/PropertyUtil.java
===================================================================
--- mp2-commons/src/main/java/com/baozun/mp2/bean/PropertyUtil.java	(revision 0)
+++ mp2-commons/src/main/java/com/baozun/mp2/bean/PropertyUtil.java	(working copy)
@@ -0,0 +1,212 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.mp2.bean;
+
+import java.lang.reflect.InvocationTargetException;
+import java.util.Map;
+
+import org.apache.commons.beanutils.BeanUtils;
+import org.apache.commons.beanutils.PropertyUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * The Class PropertyUtil.
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 1.0.8 2014-7-21 17:45:30
+ * @see org.apache.commons.beanutils.PropertyUtils
+ * @see com.feilong.commons.core.bean.BeanUtil
+ */
+public final class PropertyUtil{
+
+	/** The Constant log. */
+	@SuppressWarnings("unused")
+	private final static Logger	log	= LoggerFactory.getLogger(PropertyUtil.class);
+
+	/** Don't let anyone instantiate this class. */
+	private PropertyUtil(){}
+
+	/**
+	 * <p>
+	 * 把Bean的属性值放入到一个Map里面。
+	 * </p>
+	 * 
+	 * 这个方法返回一个Object中所有的可读属性，并将属性名/属性值放入一个Map中，<br>
+	 * 另外还有一个名为class的属性，属性值是Object的类名，事实上class是java.lang.Object的一个属性
+	 * 
+	 * @param bean
+	 *            Bean whose properties are to be extracted
+	 * @return The set of properties for the bean
+	 * @throws BeanUtilException
+	 *             if IllegalAccessException | InvocationTargetException | NoSuchMethodException
+	 * @see org.apache.commons.beanutils.BeanUtils#describe(Object)
+	 * @see org.apache.commons.beanutils.PropertyUtils#describe(Object)
+	 * @see com.feilong.commons.core.bean.BeanUtil#describe(Object)
+	 */
+	public static Map<String, Object> describe(Object bean) throws BeanUtilException{
+		try{
+			//Return the entire set of properties for which the specified bean provides a read method.
+			Map<String, Object> map = PropertyUtils.describe(bean);
+			return map;
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+
+	/**
+	 * 使用 {@link PropertyUtils#setProperty(Object, String, Object)} 来设置属性值(<b>不会进行类型转换</b>).
+	 * 
+	 * <pre>
+	 * 
+	 * BeanUtils.setProperty(pt1, &quot;x&quot;, &quot;9&quot;); // 这里的9是String类型
+	 * PropertyUtils.setProperty(pt1, &quot;x&quot;, 9); // 这里的是int类型
+	 * // 这两个类BeanUtils和PropertyUtils,前者能自动将int类型转化，后者不能
+	 * </pre>
+	 * 
+	 * 
+	 * <pre>
+	 * {@code
+	 * getProperty和setProperty,它们都只有2个参数，第一个是JavaBean对象，第二个是要操作的属性名。
+	 * Company c = new Company();
+	 * c.setName("Simple");
+	 *  
+	 * 对于Simple类型，参数二直接是属性名即可
+	 * //Simple
+	 * System.out.println(BeanUtils.getProperty(c, "name"));
+	 *  
+	 * 对于Map类型，则需要以“属性名（key值）”的形式
+	 * //Map
+	 *     System.out.println(BeanUtils.getProperty(c, "address (A2)"));
+	 *     HashMap am = new HashMap();
+	 *     am.put("1","234-222-1222211");
+	 *     am.put("2","021-086-1232323");
+	 *     BeanUtils.setProperty(c,"telephone",am);
+	 * System.out.println(BeanUtils.getProperty(c, "telephone (2)"));
+	 *  
+	 * 对于Indexed，则为“属性名[索引值]”，注意这里对于ArrayList和数组都可以用一样的方式进行操作。
+	 * //index
+	 *     System.out.println(BeanUtils.getProperty(c, "otherInfo[2]"));
+	 *     BeanUtils.setProperty(c, "product[1]", "NOTES SERVER");
+	 *     System.out.println(BeanUtils.getProperty(c, "product[1]"));
+	 *  
+	 * 当然这3种类也可以组合使用啦！
+	 * //nest
+	 *     System.out.println(BeanUtils.getProperty(c, "employee[1].name"));
+	 * 
+	 * }
+	 * </pre>
+	 * 
+	 * @param bean
+	 *            Bean whose property is to be modified
+	 * @param name
+	 *            Possibly indexed and/or nested name of the property to be modified
+	 * @param value
+	 *            Value to which this property is to be set
+	 * @throws BeanUtilException
+	 *             if IllegalAccessException | InvocationTargetException | NoSuchMethodException
+	 * @see org.apache.commons.beanutils.BeanUtils#setProperty(Object, String, Object)
+	 * @see org.apache.commons.beanutils.PropertyUtils#setProperty(Object, String, Object)
+	 * @see com.feilong.commons.core.bean.BeanUtil#setProperty(Object, String, Object)
+	 */
+	public static void setProperty(Object bean,String name,Object value) throws BeanUtilException{
+		try{
+			//Set the value of the specified property of the specified bean, no matter which property reference format is used, with no type conversions.
+
+			// PropertyUtils的功能类似于BeanUtils,但在底层不会对传递的数据做转换处理
+			PropertyUtils.setProperty(bean, name, value);
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+
+	// [start] getProperty
+
+	/**
+	 * 使用 {@link PropertyUtils#getProperty(Object, String)} 类从对象中取得属性值.
+	 * 
+	 * <pre>
+	 * {@code
+	 * getProperty和setProperty,它们都只有2个参数，第一个是JavaBean对象，第二个是要操作的属性名。
+	 * Company c = new Company();
+	 * c.setName("Simple");
+	 *  
+	 * 对于Simple类型，参数二直接是属性名即可
+	 * //Simple
+	 * System.out.println(BeanUtils.getProperty(c, "name"));
+	 *  
+	 * 对于Map类型，则需要以“属性名（key值）”的形式
+	 * //Map
+	 *     System.out.println(BeanUtils.getProperty(c, "address (A2)"));
+	 *     HashMap am = new HashMap();
+	 *     am.put("1","234-222-1222211");
+	 *     am.put("2","021-086-1232323");
+	 *     BeanUtils.setProperty(c,"telephone",am);
+	 * System.out.println(BeanUtils.getProperty(c, "telephone (2)"));
+	 *  
+	 * 对于Indexed，则为“属性名[索引值]”，注意这里对于ArrayList和数组都可以用一样的方式进行操作。
+	 * //index
+	 *     System.out.println(BeanUtils.getProperty(c, "otherInfo[2]"));
+	 *     BeanUtils.setProperty(c, "product[1]", "NOTES SERVER");
+	 *     System.out.println(BeanUtils.getProperty(c, "product[1]"));
+	 *  
+	 * 当然这3种类也可以组合使用啦！
+	 * //nest
+	 *     System.out.println(BeanUtils.getProperty(c, "employee[1].name"));
+	 * 
+	 * }
+	 * </pre>
+	 * 
+	 * <h4>{@link BeanUtils#getProperty(Object, String)}&{@link PropertyUtils#getProperty(Object, String)}的区别</h4>
+	 * 
+	 * <blockquote>
+	 * <p>
+	 * {@link BeanUtils#getProperty(Object, String)} 会将结果转成String返回,<br>
+	 * {@link PropertyUtils#getProperty(Object, String)} 结果是Object类型,不会做类型转换
+	 * </p>
+	 * </blockquote>
+	 * 
+	 * @param <T>
+	 *            the generic type
+	 * @param bean
+	 *            Bean whose property is to be extracted
+	 * @param name
+	 *            Possibly indexed and/or nested name of the property to be extracted
+	 * 
+	 * @return 使用{@link PropertyUtils#getProperty(Object, String)} 从对象中取得属性值
+	 * @throws BeanUtilException
+	 *             if IllegalAccessException | InvocationTargetException | NoSuchMethodException
+	 * @see com.feilong.commons.core.bean.BeanUtil#getProperty(Object, String)
+	 * @see org.apache.commons.beanutils.BeanUtils#getProperty(Object, String)
+	 * @see org.apache.commons.beanutils.PropertyUtils#getProperty(Object, String)
+	 * @see org.apache.commons.beanutils.PropertyUtilsBean
+	 */
+	public static <T> T getProperty(Object bean,String name) throws BeanUtilException{
+		//Return the value of the specified property of the specified bean, no matter which property reference format is used, with no type conversions.
+		//For more details see PropertyUtilsBean.
+		try{
+			@SuppressWarnings("unchecked")
+			T propertyValue = (T) PropertyUtils.getProperty(bean, name);
+			return propertyValue;
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+	// [end]
+}
\ No newline at end of file
Index: mp2-commons/src/main/java/com/baozun/mp2/bean/converters/DatePatternConverter.java
===================================================================
--- mp2-commons/src/main/java/com/baozun/mp2/bean/converters/DatePatternConverter.java	(revision 0)
+++ mp2-commons/src/main/java/com/baozun/mp2/bean/converters/DatePatternConverter.java	(working copy)
@@ -0,0 +1,148 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.mp2.bean.converters;
+
+import java.util.Date;
+import java.util.Locale;
+
+import org.apache.commons.beanutils.converters.DateTimeConverter;
+
+import com.baozun.mp2.date.DatePattern;
+import com.baozun.mp2.util.DateFormatUtil;
+import com.baozun.mp2.util.Validator;
+
+/**
+ * The Class DateConverter,依赖apache commons-beanutils工具包<br>
+ * 
+ * for example:
+ * 
+ * <pre>
+ * User a = new User();
+ * a.setId(5L);
+ * Date now = new Date();
+ * a.setDate(now);
+ * User b = new User();
+ * 
+ * DatePatternConverter converter = new DatePatternConverter(DatePattern.forToString, Locale.US);
+ * ConvertUtils.register(converter, Date.class);
+ * 
+ * BeanUtil.copyProperty(b, a, &quot;date&quot;);
+ * </pre>
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">金鑫</a>
+ * @version 1.0 2014-5-4 0:35:31
+ * @see org.apache.commons.beanutils.converters.DateConverter
+ * @see org.apache.commons.beanutils.converters.DateTimeConverter
+ * @see org.apache.commons.beanutils.converters.AbstractConverter
+ * @see org.apache.commons.beanutils.Converter
+ * @see org.apache.commons.beanutils.ConvertUtils#register(org.apache.commons.beanutils.Converter, Class)
+ * @since 1.0.0
+ */
+public class DatePatternConverter extends DateTimeConverter{
+
+	/** pattern {@link DatePattern}. */
+	private String	pattern;
+
+	/** The locale. */
+	private Locale	locale	= Locale.getDefault();
+
+	/**
+	 * Instantiates a new date converter.
+	 * 
+	 * @param datePattern
+	 *            {@link DatePattern}
+	 * 
+	 * @see org.apache.commons.beanutils.converters.DateConverter
+	 * @see org.apache.commons.beanutils.converters.DateTimeConverter
+	 * @see org.apache.commons.beanutils.converters.AbstractConverter
+	 * @see org.apache.commons.beanutils.Converter
+	 * @see org.apache.commons.beanutils.ConvertUtils#register(org.apache.commons.beanutils.Converter, Class)
+	 */
+	public DatePatternConverter(String datePattern){
+		this.pattern = datePattern;
+	}
+
+	/**
+	 * Instantiates a new date converter.
+	 * 
+	 * @param datePattern
+	 *            {@link DatePattern}
+	 * @param locale
+	 *            the locale
+	 * 
+	 * @see org.apache.commons.beanutils.converters.DateConverter
+	 * @see org.apache.commons.beanutils.converters.DateTimeConverter
+	 * @see org.apache.commons.beanutils.converters.AbstractConverter
+	 * @see org.apache.commons.beanutils.Converter
+	 * @see org.apache.commons.beanutils.ConvertUtils#register(org.apache.commons.beanutils.Converter, Class)
+	 */
+	public DatePatternConverter(String datePattern, Locale locale){
+		this.pattern = datePattern;
+		this.locale = locale;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.apache.commons.beanutils.converters.AbstractConverter#getDefaultType()
+	 */
+	@Override
+	protected Class<?> getDefaultType(){
+		return Date.class;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.apache.commons.beanutils.converters.AbstractConverter#convert(java.lang.Class, java.lang.Object)
+	 */
+	@SuppressWarnings("unchecked")
+	@Override
+	public <T> T convert(Class<T> type,Object value){
+		if (Validator.isNullOrEmpty(pattern)){
+			throw new IllegalArgumentException("value can't be null/empty!");
+		}
+
+		if (Validator.isNullOrEmpty(value)){
+			return null;
+		}
+		Date dateObj = null;
+		if (value instanceof String){
+			dateObj = DateFormatUtil.parse(value.toString(), pattern, locale);
+		}
+		return (T) dateObj;
+	}
+
+	/**
+	 * Sets the pattern {@link DatePattern}.
+	 * 
+	 * @param pattern
+	 *            the pattern to set
+	 */
+	public void setPattern(String pattern){
+		this.pattern = pattern;
+	}
+
+	/**
+	 * Sets the locale.
+	 * 
+	 * @param locale
+	 *            the locale to set
+	 */
+	public void setLocale(Locale locale){
+		this.locale = locale;
+	}
+}
\ No newline at end of file
Index: mp2-commons/src/main/java/com/baozun/mp2/bean/converters/package-info.java
===================================================================
--- mp2-commons/src/main/java/com/baozun/mp2/bean/converters/package-info.java	(revision 0)
+++ mp2-commons/src/main/java/com/baozun/mp2/bean/converters/package-info.java	(working copy)
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ *相关自定义的converters
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a> 
+ * @version 1.0.7 2014年6月18日 上午12:24:44 
+ * @since 1.0.7
+ */
+package com.baozun.mp2.bean.converters;
\ No newline at end of file
Index: mp2-commons/src/main/java/com/baozun/mp2/bean/package-info.java
===================================================================
--- mp2-commons/src/main/java/com/baozun/mp2/bean/package-info.java	(revision 0)
+++ mp2-commons/src/main/java/com/baozun/mp2/bean/package-info.java	(working copy)
@@ -0,0 +1,20 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ *封装{@code org.apache.commons.beanutils}经常使用的工具类
+ *@since 1.0.0
+ */
+package com.baozun.mp2.bean;
\ No newline at end of file
Index: mp2-commons/src/main/java/com/baozun/mp2/bean/BeanUtilException.java
===================================================================
--- mp2-commons/src/main/java/com/baozun/mp2/bean/BeanUtilException.java	(revision 0)
+++ mp2-commons/src/main/java/com/baozun/mp2/bean/BeanUtilException.java	(working copy)
@@ -0,0 +1,91 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.mp2.bean;
+
+import com.baozun.mp2.util.Slf4jUtil;
+
+//Exception又分为两类：一种是CheckedException，一种是UncheckedException。
+//
+//这两种Exception的区别主要是CheckedException需要用try...catch...显示的捕获，
+//而UncheckedException不需要捕获。 通常UncheckedException又叫做RuntimeException。
+//	
+//《effective java》指出：
+//	对于可恢复的条件使用被检查的异常（CheckedException），
+//	对于程序错误（言外之意不可恢复，大错已经酿成）使用运行时异常（RuntimeException）。
+
+/**
+ * 使用 beanutil出现的异常.
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 1.0.8 2014年7月21日 下午5:34:50
+ * @since 1.0.8
+ */
+public final class BeanUtilException extends RuntimeException{
+
+	/** The Constant serialVersionUID. */
+	private static final long	serialVersionUID	= -1699987643831455524L;
+
+	/**
+	 * Instantiates a new bean util exception.
+	 */
+	public BeanUtilException(){
+		super();
+	}
+
+	/**
+	 * Instantiates a new bean util exception.
+	 * 
+	 * @param message
+	 *            the message
+	 */
+	public BeanUtilException(String message){
+		super(message);
+	}
+
+	/**
+	 * Instantiates a new bean util exception.
+	 * 
+	 * @param messagePattern
+	 *            the message pattern
+	 * @param args
+	 *            the args
+	 */
+	public BeanUtilException(String messagePattern, Object...args){
+		super(Slf4jUtil.formatMessage(messagePattern, args));
+	}
+
+	/**
+	 * Instantiates a new bean util exception.
+	 * 
+	 * @param message
+	 *            the message
+	 * @param cause
+	 *            the cause
+	 */
+	public BeanUtilException(String message, Throwable cause){
+		super(message, cause);
+	}
+
+	/**
+	 * Instantiates a new bean util exception.
+	 * 
+	 * @param cause
+	 *            the cause
+	 */
+	public BeanUtilException(Throwable cause){
+		super(cause);
+	}
+}
Index: mp2-configuration/project/mp2-biz/mp2-payment/dev/adaptor-tcash.properties
===================================================================
--- mp2-configuration/project/mp2-biz/mp2-payment/dev/adaptor-tcash.properties	(revision 0)
+++ mp2-configuration/project/mp2-biz/mp2-payment/dev/adaptor-tcash.properties	(working copy)
@@ -0,0 +1,20 @@
+##################################
+#
+#支付网关提供
+#
+###################################
+
+tcash.publicTokenURL=http://10.2.232.79:11080/tcash-api/api/payment
+
+tcash.terminalId=13014
+tcash.userKey=metraplasa_user
+tcash.password=metraplasa_pass
+tcash.signature=metraplasa_sign
+
+
+tcash.landingPageURL=http://10.2.232.79:12080/tcashpay/payment
+
+tcash.submit.method=post
+
+#Grand total bill customer (no separator)
+tcash.pricePattern=################
\ No newline at end of file
Index: mp2-web/mp2-web-marketplace/mp2-web-marketplace-member/pom.xml
===================================================================
--- mp2-web/mp2-web-marketplace/mp2-web-marketplace-member/pom.xml	(revision 11560)
+++ mp2-web/mp2-web-marketplace/mp2-web-marketplace-member/pom.xml	(working copy)
@@ -314,11 +314,11 @@
 								<include>**/*.vm</include>
 							</includes>
 						</resource>
-						<resource>
+				<!-- 		<resource>
 							<directory>${config.path}/tomcat</directory>
 							<includes><include>context.xml</include></includes>
 							<targetPath>META-INF</targetPath>
-						</resource>
+						</resource> -->
 					</webResources>
 				</configuration>
 			</plugin>
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/package-info.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/package-info.java	(revision 0)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/package-info.java	(working copy)
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ *add t-cash
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a> 
+ * @version 1.0.8 2014年7月17日 上午11:37:26 
+ * @since 1.0.8
+ */
+package com.baozun.payment.payment.adaptor.tcash;
\ No newline at end of file
Index: mp2-commons/src/main/java/com/baozun/mp2/enumtype/HttpMethodType.java
===================================================================
--- mp2-commons/src/main/java/com/baozun/mp2/enumtype/HttpMethodType.java	(revision 11560)
+++ mp2-commons/src/main/java/com/baozun/mp2/enumtype/HttpMethodType.java	(working copy)
@@ -15,13 +15,15 @@
  */
 package com.baozun.mp2.enumtype;
 
+import com.baozun.mp2.util.EnumUtil;
+
 /**
- * http请求方法,目前仅支持通用的get和post 其他不支持
+ * http请求方法,目前仅支持通用的get和post 其他不支持.
  * 
  * @author <a href="mailto:venusdrogon@163.com">金鑫</a>
- * @version 1.0 2010-12-16 下午01:11:27
+ * @version 1.0.0 2010-12-16 下午01:11:27
  * @version 1.0.6 2014-5-8 03:27
- * @since 1.0
+ * @since 1.0.0
  */
 public enum HttpMethodType{
 
@@ -37,6 +39,22 @@
 	private String	method;
 
 	/**
+	 * Gets the by method value ignore case.
+	 * 
+	 * @param methodValue
+	 *            the method value
+	 * @return the by method value ignore case
+	 * @throws NoSuchFieldException
+	 *             找不到匹配的枚举
+	 * @see EnumUtil#getEnumByPropertyValueIgnoreCase(Class, String, String)
+	 * @since 1.0.8
+	 */
+	public static HttpMethodType getByMethodValueIgnoreCase(String methodValue) throws NoSuchFieldException{
+		String propertyName = "method";
+		return EnumUtil.getEnumByPropertyValueIgnoreCase(HttpMethodType.class, propertyName, methodValue);
+	}
+
+	/**
 	 * Instantiates a new http method type.
 	 * 
 	 * @param method
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/command/QueryRequest.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/command/QueryRequest.java	(revision 11560)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/command/QueryRequest.java	(working copy)
@@ -32,6 +32,9 @@
 	/** 我们的交易号码,可以是 订单code,也可以是自定义的交易code,每个商城规则可能不一样,the same as PayRequest tradeNo. */
 	private String				tradeNo;
 
+	/** 支付网关的交易号,一般来说,大部分支付网关都支持 {@link #tradeNo}我们平台的交易号查询, 但是个别的支付网关就只支持他们自己的交易号, 比如 t-cash. */
+	private String				gatewayTradeNo;
+
 	/** 买家,定义为 Serializable ,兼容 Long,String等,某些查询需要传递该值,不同商城的实现不同,可能是 id,也可能是 code,视情况而定. */
 	private Serializable		buyer;
 
@@ -73,4 +76,23 @@
 		this.buyer = buyer;
 	}
 
+	/**
+	 * 获得 支付网关的交易号,一般来说,大部分支付网关都支持 {@link #tradeNo}我们平台的交易号查询, 但是个别的支付网关就只支持他们自己的交易号, 比如 t-cash.
+	 * 
+	 * @return the gatewayTradeNo
+	 */
+	public String getGatewayTradeNo(){
+		return gatewayTradeNo;
+	}
+
+	/**
+	 * 设置 支付网关的交易号,一般来说,大部分支付网关都支持 {@link #tradeNo}我们平台的交易号查询, 但是个别的支付网关就只支持他们自己的交易号, 比如 t-cash.
+	 * 
+	 * @param gatewayTradeNo
+	 *            the gatewayTradeNo to set
+	 */
+	public void setGatewayTradeNo(String gatewayTradeNo){
+		this.gatewayTradeNo = gatewayTradeNo;
+	}
+
 }
\ No newline at end of file
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/doku/DokuAdvanceAdaptor.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/doku/DokuAdvanceAdaptor.java	(revision 11560)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/doku/DokuAdvanceAdaptor.java	(working copy)
@@ -137,7 +137,7 @@
 			throw new IllegalArgumentException(
 					"buyer can't be null/empty!,this time,queryRequest.getBuyer() use for generateSessionId,very important!");
 		}
-		HttpMethodType httpMethodType = EnumUtil.getEnumByField(HttpMethodType.class, "method", queryMethod);
+		HttpMethodType httpMethodType = EnumUtil.getEnumByPropertyValue(HttpMethodType.class, "method", queryMethod);
 		if (Validator.isNullOrEmpty(httpMethodType)){
 			throw new IllegalArgumentException(
 					"httpMethodType can't be null/empty!Do you Forget to configure correct queryMethod?and only support get/post now");
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/CheckTransactionStatus.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/CheckTransactionStatus.java	(revision 0)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/CheckTransactionStatus.java	(working copy)
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.payment.advance.adaptor.tcash;
+
+/**
+ * 状态
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 1.0.8 2014年7月22日 下午3:57:46
+ * @since 1.0.8
+ */
+public interface CheckTransactionStatus{
+
+	/** Status Customer Transaction . */
+	String	SUCCESS_COMPLETED	= "SUCCESS_COMPLETED";
+
+}
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/CheckTransactionStatusResponse.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/CheckTransactionStatusResponse.java	(revision 0)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/CheckTransactionStatusResponse.java	(working copy)
@@ -0,0 +1,138 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.payment.advance.adaptor.tcash;
+
+import java.io.Serializable;
+
+import com.baozun.payment.advance.command.QueryResultCommand;
+
+/**
+ * Below table shows T-Cash Check Transaction Status response.
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 1.0.8 2014年7月21日 下午4:03:39
+ * @since 1.0.8
+ */
+public final class CheckTransactionStatusResponse implements QueryResultCommand,Serializable{
+
+	/** The Constant serialVersionUID. */
+	private static final long	serialVersionUID	= 288232184048495608L;
+
+	/**
+	 * T-Cash reference number that generated when merchant generate public token and used by customer when confirm transaction.<br>
+	 * Example 1: 1709131628081576
+	 */
+	private String				refNum;
+
+	/**
+	 * Customer transaction amount <br>
+	 * Example 1: 1250.
+	 */
+	private String				amount;
+
+	/**
+	 * Transaction Date <br>
+	 * Example 1: 17/09/2013 16:49:50.
+	 */
+	private String				transactionDate;
+
+	/**
+	 * Status Customer Transaction <br>
+	 * Example 1: SUCCESS_COMPLETED.
+	 */
+	private String				Status;
+
+	/**
+	 * 获得 t-Cash reference number that generated when merchant generate public token and used by customer when confirm transaction.
+	 * 
+	 * @return the refNum
+	 */
+	public String getRefNum(){
+		return refNum;
+	}
+
+	/**
+	 * 设置 t-Cash reference number that generated when merchant generate public token and used by customer when confirm transaction.
+	 * 
+	 * @param refNum
+	 *            the refNum to set
+	 */
+	public void setRefNum(String refNum){
+		this.refNum = refNum;
+	}
+
+	/**
+	 * 获得 customer transaction amount <br>
+	 * Example 1: 1250.
+	 * 
+	 * @return the amount
+	 */
+	public String getAmount(){
+		return amount;
+	}
+
+	/**
+	 * 设置 customer transaction amount <br>
+	 * Example 1: 1250.
+	 * 
+	 * @param amount
+	 *            the amount to set
+	 */
+	public void setAmount(String amount){
+		this.amount = amount;
+	}
+
+	/**
+	 * 获得 transaction Date <br>
+	 * Example 1: 17/09/2013 16:49:50.
+	 * 
+	 * @return the transactionDate
+	 */
+	public String getTransactionDate(){
+		return transactionDate;
+	}
+
+	/**
+	 * 设置 transaction Date <br>
+	 * Example 1: 17/09/2013 16:49:50.
+	 * 
+	 * @param transactionDate
+	 *            the transactionDate to set
+	 */
+	public void setTransactionDate(String transactionDate){
+		this.transactionDate = transactionDate;
+	}
+
+	/**
+	 * Gets the status.
+	 * 
+	 * @return the status
+	 */
+	public String getStatus(){
+		return Status;
+	}
+
+	/**
+	 * Sets the status.
+	 * 
+	 * @param status
+	 *            the status to set
+	 */
+	public void setStatus(String status){
+		Status = status;
+	}
+
+}
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/TcashAdvanceAdaptor.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/TcashAdvanceAdaptor.java	(revision 0)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/TcashAdvanceAdaptor.java	(working copy)
@@ -0,0 +1,218 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.payment.advance.adaptor.tcash;
+
+import java.math.BigDecimal;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.baozun.mp2.date.DatePattern;
+import com.baozun.mp2.date.DateUtil;
+import com.baozun.mp2.enumtype.HttpMethodType;
+import com.baozun.mp2.tools.json.JsonUtil;
+import com.baozun.mp2.util.HttpClientConfig;
+import com.baozun.mp2.util.HttpClientUtil;
+import com.baozun.mp2.util.Slf4jUtil;
+import com.baozun.mp2.util.Validator;
+import com.baozun.payment.advance.AbstractPaymentAdvanceAdaptor;
+import com.baozun.payment.advance.command.QueryRequest;
+import com.baozun.payment.advance.command.QueryResult;
+import com.baozun.payment.command.PaymentResult;
+
+/**
+ * The Class TcashAdvanceAdaptor.
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 1.0.8 2014-7-21 16:01:57
+ */
+public class TcashAdvanceAdaptor extends AbstractPaymentAdvanceAdaptor{
+
+	/** The Constant log. */
+	private static final Logger	log	= LoggerFactory.getLogger(TcashAdvanceAdaptor.class);
+
+	private String				checkTransactionStatusURL;
+
+	private String				checkTransactionStatusMethod;
+
+	/**
+	 * String (15) M <br>
+	 * Terminal ID Merchant from T-Cash <br>
+	 * 10601
+	 */
+	private String				terminalId;
+
+	/**
+	 * String (30) M <br>
+	 * User Credential that had been generated by T-Cash <br>
+	 * testing
+	 */
+	private String				userKey;
+
+	/**
+	 * String (30) M <br>
+	 * Password Credential that had been generated by T-Cash <br>
+	 * 1234
+	 */
+	private String				passKey;
+
+	/**
+	 * String (30) M <br>
+	 * Signature customer that had been generated by T-Cash <br>
+	 * 1234
+	 */
+	private String				signKey;
+
+	public QueryResult getQueryResult(QueryRequest queryRequest) throws Exception{
+
+		// *************************************************************
+		String merchantTransactionID = queryRequest.getTradeNo();
+		String refNum = queryRequest.getGatewayTradeNo();
+
+		Map<String, String> params = new HashMap<String, String>();
+
+		params.put("terminalId", terminalId);
+		params.put("userKey", userKey);
+		params.put("passKey", passKey);
+		params.put("signKey", signKey);
+
+		/**
+		 * String (30) M <br>
+		 * T-Cash reference number that generated when merchant generate public token<br>
+		 * 1709131628081576
+		 */
+		params.put("refNum", refNum);
+
+		HttpClientConfig httpClientConfig = new HttpClientConfig();
+
+		httpClientConfig.setHttpMethodType(HttpMethodType.getByMethodValueIgnoreCase(checkTransactionStatusMethod));
+
+		httpClientConfig.setParams(params);
+		httpClientConfig.setUri(checkTransactionStatusURL);
+
+		String responseBodyAsString = HttpClientUtil.getResponseBodyAsString(httpClientConfig);
+
+		String gatewayResult = responseBodyAsString;
+		CheckTransactionStatusResponse checkTransactionStatusResponse = JsonUtil
+				.toBean(gatewayResult, CheckTransactionStatusResponse.class);
+
+		try{
+
+			// ******************************************************************
+			String transactionStatus = checkTransactionStatusResponse.getStatus();
+
+			//  
+			if (Validator.isNullOrEmpty(transactionStatus)){
+				String messagePattern = "t-cash transactionStatus isNullOrEmpty,checkTransactionStatusResponse:{},responseBodyAsString is:{}";
+				String formatMessage = Slf4jUtil.formatMessage(
+						messagePattern,
+						JsonUtil.format(checkTransactionStatusResponse),
+						gatewayResult);
+				throw new RuntimeException(formatMessage);
+			}
+
+			PaymentResult paymentResult = toPaymentResult(transactionStatus);
+			String gatewayTradeNo = checkTransactionStatusResponse.getRefNum();
+			BigDecimal gatewayAmount = new BigDecimal(checkTransactionStatusResponse.getAmount());
+			Date gatewayPaymentTime = DateUtil.string2Date(checkTransactionStatusResponse.getTransactionDate(), DatePattern.commonWithTime);
+			QueryResult queryResult = new QueryResult();
+
+			queryResult.setGatewayAmount(gatewayAmount);
+			queryResult.setGatewayPaymentTime(gatewayPaymentTime);
+			queryResult.setGatewayResult(gatewayResult);
+			queryResult.setGatewayTradeNo(gatewayTradeNo);
+
+			queryResult.setPaymentResult(paymentResult);
+			queryResult.setQueryResultCommand(checkTransactionStatusResponse);
+			queryResult.setTradeNo(merchantTransactionID);
+
+			return queryResult;
+		}catch (Exception e){
+			log.error("{},queryRequest:{}", e.getMessage(), JsonUtil.format(queryRequest));
+			e.printStackTrace();
+			throw new RuntimeException(e);
+		}
+	}
+
+	/**
+	 * To payment result.
+	 * 
+	 * @param transactionStatus
+	 *            the transaction status
+	 * @return the payment result
+	 */
+	private PaymentResult toPaymentResult(String transactionStatus){
+		if (CheckTransactionStatus.SUCCESS_COMPLETED.equals(transactionStatus)){
+			return PaymentResult.PAID;
+		}else{
+			//TODO
+			// 其余视为 失败,可以重新支付
+			return PaymentResult.FAIL;
+		}
+	}
+
+	/**
+	 * @param terminalId
+	 *            the terminalId to set
+	 */
+	public void setTerminalId(String terminalId){
+		this.terminalId = terminalId;
+	}
+
+	/**
+	 * @param userKey
+	 *            the userKey to set
+	 */
+	public void setUserKey(String userKey){
+		this.userKey = userKey;
+	}
+
+	/**
+	 * @param passKey
+	 *            the passKey to set
+	 */
+	public void setPassKey(String passKey){
+		this.passKey = passKey;
+	}
+
+	/**
+	 * @param signKey
+	 *            the signKey to set
+	 */
+	public void setSignKey(String signKey){
+		this.signKey = signKey;
+	}
+
+	/**
+	 * @param checkTransactionStatusURL
+	 *            the checkTransactionStatusURL to set
+	 */
+	public void setCheckTransactionStatusURL(String checkTransactionStatusURL){
+		this.checkTransactionStatusURL = checkTransactionStatusURL;
+	}
+
+	/**
+	 * @param checkTransactionStatusMethod
+	 *            the checkTransactionStatusMethod to set
+	 */
+	public void setCheckTransactionStatusMethod(String checkTransactionStatusMethod){
+		this.checkTransactionStatusMethod = checkTransactionStatusMethod;
+	}
+
+}
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/package-info.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/package-info.java	(revision 0)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/package-info.java	(working copy)
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ *
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a> 
+ * @version 1.0.8 2014年7月21日 下午4:01:25 
+ * @since 1.0.8
+ */
+package com.baozun.payment.advance.adaptor.tcash;
\ No newline at end of file
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/CheckTransactionStatusResponse.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/CheckTransactionStatusResponse.java	(revision 0)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/CheckTransactionStatusResponse.java	(working copy)
@@ -0,0 +1,138 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.payment.advance.adaptor.tcash;
+
+import java.io.Serializable;
+
+import com.baozun.payment.advance.command.QueryResultCommand;
+
+/**
+ * Below table shows T-Cash Check Transaction Status response.
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 1.0.8 2014年7月21日 下午4:03:39
+ * @since 1.0.8
+ */
+public final class CheckTransactionStatusResponse implements QueryResultCommand,Serializable{
+
+	/** The Constant serialVersionUID. */
+	private static final long	serialVersionUID	= 288232184048495608L;
+
+	/**
+	 * T-Cash reference number that generated when merchant generate public token and used by customer when confirm transaction.<br>
+	 * Example 1: 1709131628081576
+	 */
+	private String				refNum;
+
+	/**
+	 * Customer transaction amount <br>
+	 * Example 1: 1250.
+	 */
+	private String				amount;
+
+	/**
+	 * Transaction Date <br>
+	 * Example 1: 17/09/2013 16:49:50.
+	 */
+	private String				transactionDate;
+
+	/**
+	 * Status Customer Transaction <br>
+	 * Example 1: SUCCESS_COMPLETED.
+	 */
+	private String				Status;
+
+	/**
+	 * 获得 t-Cash reference number that generated when merchant generate public token and used by customer when confirm transaction.
+	 * 
+	 * @return the refNum
+	 */
+	public String getRefNum(){
+		return refNum;
+	}
+
+	/**
+	 * 设置 t-Cash reference number that generated when merchant generate public token and used by customer when confirm transaction.
+	 * 
+	 * @param refNum
+	 *            the refNum to set
+	 */
+	public void setRefNum(String refNum){
+		this.refNum = refNum;
+	}
+
+	/**
+	 * 获得 customer transaction amount <br>
+	 * Example 1: 1250.
+	 * 
+	 * @return the amount
+	 */
+	public String getAmount(){
+		return amount;
+	}
+
+	/**
+	 * 设置 customer transaction amount <br>
+	 * Example 1: 1250.
+	 * 
+	 * @param amount
+	 *            the amount to set
+	 */
+	public void setAmount(String amount){
+		this.amount = amount;
+	}
+
+	/**
+	 * 获得 transaction Date <br>
+	 * Example 1: 17/09/2013 16:49:50.
+	 * 
+	 * @return the transactionDate
+	 */
+	public String getTransactionDate(){
+		return transactionDate;
+	}
+
+	/**
+	 * 设置 transaction Date <br>
+	 * Example 1: 17/09/2013 16:49:50.
+	 * 
+	 * @param transactionDate
+	 *            the transactionDate to set
+	 */
+	public void setTransactionDate(String transactionDate){
+		this.transactionDate = transactionDate;
+	}
+
+	/**
+	 * Gets the status.
+	 * 
+	 * @return the status
+	 */
+	public String getStatus(){
+		return Status;
+	}
+
+	/**
+	 * Sets the status.
+	 * 
+	 * @param status
+	 *            the status to set
+	 */
+	public void setStatus(String status){
+		Status = status;
+	}
+
+}
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/package-info.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/package-info.java	(revision 0)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/advance/adaptor/tcash/package-info.java	(working copy)
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ *
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a> 
+ * @version 1.0.8 2014年7月21日 下午4:01:25 
+ * @since 1.0.8
+ */
+package com.baozun.payment.advance.adaptor.tcash;
\ No newline at end of file
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/TcashPayAdaptor.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/TcashPayAdaptor.java	(revision 0)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/TcashPayAdaptor.java	(working copy)
@@ -0,0 +1,329 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.payment.payment.adaptor.tcash;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.servlet.http.HttpServletRequest;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.baozun.mp2.enumtype.HttpMethodType;
+import com.baozun.mp2.tools.json.JsonUtil;
+import com.baozun.mp2.util.HttpClientConfig;
+import com.baozun.mp2.util.HttpClientUtil;
+import com.baozun.mp2.util.NumberUtil;
+import com.baozun.mp2.util.Validator;
+import com.baozun.payment.command.PaymentResult;
+import com.baozun.payment.payment.adaptor.AbstractPaymentAdaptor;
+import com.baozun.payment.payment.command.PayRequest;
+import com.baozun.payment.payment.command.PaymentFormEntity;
+
+/**
+ * tcash.
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 1.0.8 2014年7月17日 上午11:47:11
+ * @since 1.0.8
+ */
+public class TcashPayAdaptor extends AbstractPaymentAdaptor{
+
+	/** The Constant log. */
+	private static final Logger	log	= LoggerFactory.getLogger(TcashPayAdaptor.class);
+
+	//***********************************************************************************************
+
+	/**
+	 * Terminal ID Merchant from T-Cash <br>
+	 * String (15) M <br>
+	 * example: 10601.
+	 */
+	private String				terminalId;
+
+	/**
+	 * User Credential that had been generated by T-Cash<br>
+	 * String (30) M<br>
+	 * example: testing.
+	 */
+	private String				userKey;
+
+	/**
+	 * Password Credential that had been generated by T-Cash <br>
+	 * String (30) M<br>
+	 * example: 1234.
+	 */
+	private String				password;
+
+	/**
+	 * Signature customer that had been generated by T-Cash <br>
+	 * String (30) M<br>
+	 * example: 1234.
+	 */
+	private String				signature;
+
+	//***********************************************************************************************
+
+	/** 取public token 的url地址. */
+	private String				publicTokenURL;
+
+	/** 提交地址. */
+	private String				landingPageURL;
+
+	/** 提交的method. */
+	private String				submitMethod;
+
+	//***********************************************************************************************
+
+	/** The price pattern. */
+	private String				pricePattern;
+
+	/**
+	 * Below table shows all attribute used in T-Cash Public Token request. <br>
+	 * Message will transferred using HTTP GET (if using Javascript) or HTTP POST (if using backend process) protocol.
+	 * 
+	 * @param payRequest
+	 *            the pay request
+	 * @return the public token
+	 */
+	private String getPublicToken(PayRequest payRequest){
+
+		//**************************************************************************
+		// Merchant page that prepared for success payment transaction <br>
+		// String (150) M<br>
+		// example: http://www.merchant-tcash.com/merchant_visitek/success.html
+		String successUrl = payRequest.getReturnUrl();
+
+		// Merchant page that prepared for failed payment transaction <br>
+		// String (150) M<br>
+		// example: http://www.merchant-tcash.com/merchant_visitek/failed.html
+		String failedUrl = payRequest.getNotifyUrl();
+
+		String totalAmount = NumberUtil.toString(payRequest.getTotalFee(), pricePattern);
+
+		// Customer shopping items <br>
+		// String(json) Optional<br>
+		// example: [["LENOVO IdeaCentre C320 444 All-in-One  - White","500","1"]]
+		String items = "";
+
+		//**************************************************************************
+
+		Map<String, String> params = new HashMap<String, String>();
+
+		//Terminal ID Merchant from T-Cash
+		params.put("terminalId", terminalId);
+
+		//User Credential that had been generated by T-Cash
+		params.put("userKey", userKey);
+
+		//Password Credential that had been generated by T-Cash
+		params.put("password", password);
+
+		//Signature customer that had been generated by T-Cash
+		params.put("signature", signature);
+
+		//********************************************************************
+		//		 * Merchant transaction ID <br>
+		//		 * String (30) M <br>
+		//		 * example: 109873
+		params.put("trxId", payRequest.getTradeNo());
+
+		//Grand total bill customer (no separator)
+		//   String (7) M<br>
+		//   example: 300000
+		params.put("total", totalAmount);
+
+		//Merchant page that prepared for success payment transaction
+		params.put("successUrl", successUrl);
+
+		//Merchant page that prepared for failed payment transaction 
+		params.put("failedUrl", failedUrl);
+
+		//Customer shopping items
+		params.put("items", items);
+
+		HttpClientConfig httpClientConfig = new HttpClientConfig();
+		httpClientConfig.setHttpMethodType(HttpMethodType.POST);
+
+		httpClientConfig.setParams(params);
+		httpClientConfig.setUri(publicTokenURL);
+
+		String responseBodyAsString = HttpClientUtil.getResponseBodyAsString(httpClientConfig);
+
+		if (log.isInfoEnabled()){
+			log.info("responseBodyAsString:{}", responseBodyAsString);
+		}
+
+		return responseBodyAsString;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see
+	 * com.feilong.framework.netpay.payment.PaymentAdaptor#getPaymentFormEntity(com.feilong.framework.netpay.payment.command.PayRequest,
+	 * java.util.Map)
+	 */
+	public PaymentFormEntity getPaymentFormEntity(PayRequest payRequest,Map<String, String> specialParamMap){
+		doCommonValidate(payRequest);
+
+		String publicToken = getPublicToken(payRequest);
+
+		if (Validator.isNotNullOrEmpty(publicToken)){
+			PublicTokenResponse publicTokenResponse = JsonUtil.toBean(publicToken, PublicTokenResponse.class);
+
+			String pgpToken = publicTokenResponse.getPgpToken();
+			String refNum = publicTokenResponse.getRefNum();
+			String fastTime = publicTokenResponse.getFastTime();
+
+			// ******************************************************************************
+			Map<String, String> map = new HashMap<String, String>();
+			map.put("message", pgpToken);
+
+			return getPaymentFormEntity(landingPageURL, submitMethod, map);
+		}
+		return null;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see com.feilong.framework.netpay.payment.PaymentAdaptor#verifyNotify(javax.servlet.http.HttpServletRequest)
+	 */
+	public PaymentResult verifyNotify(HttpServletRequest request) throws IllegalArgumentException{
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see com.feilong.framework.netpay.payment.PaymentAdaptor#verifyRedirect(javax.servlet.http.HttpServletRequest)
+	 */
+	public PaymentResult verifyRedirect(HttpServletRequest request){
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see com.feilong.framework.netpay.payment.PaymentAdaptor#getFeedbackTradeNo(javax.servlet.http.HttpServletRequest)
+	 */
+	public String getFeedbackTradeNo(HttpServletRequest request){
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see com.feilong.framework.netpay.payment.PaymentAdaptor#getFeedbackTotalFee(javax.servlet.http.HttpServletRequest)
+	 */
+	public String getFeedbackTotalFee(HttpServletRequest request){
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	/**
+	 * 设置 terminal ID Merchant from T-Cash <br>
+	 * String (15) M <br>
+	 * example: 10601.
+	 * 
+	 * @param terminalId
+	 *            the terminalId to set
+	 */
+	public void setTerminalId(String terminalId){
+		this.terminalId = terminalId;
+	}
+
+	/**
+	 * 设置 user Credential that had been generated by T-Cash<br>
+	 * String (30) M<br>
+	 * example: testing.
+	 * 
+	 * @param userKey
+	 *            the userKey to set
+	 */
+	public void setUserKey(String userKey){
+		this.userKey = userKey;
+	}
+
+	/**
+	 * 设置 password Credential that had been generated by T-Cash <br>
+	 * String (30) M<br>
+	 * example: 1234.
+	 * 
+	 * @param password
+	 *            the password to set
+	 */
+	public void setPassword(String password){
+		this.password = password;
+	}
+
+	/**
+	 * 设置 signature customer that had been generated by T-Cash <br>
+	 * String (30) M<br>
+	 * example: 1234.
+	 * 
+	 * @param signature
+	 *            the signature to set
+	 */
+	public void setSignature(String signature){
+		this.signature = signature;
+	}
+
+	/**
+	 * 设置 取public token 的url地址.
+	 * 
+	 * @param publicTokenURL
+	 *            the publicTokenURL to set
+	 */
+	public void setPublicTokenURL(String publicTokenURL){
+		this.publicTokenURL = publicTokenURL;
+	}
+
+	/**
+	 * 设置 the price pattern.
+	 * 
+	 * @param pricePattern
+	 *            the pricePattern to set
+	 */
+	public void setPricePattern(String pricePattern){
+		this.pricePattern = pricePattern;
+	}
+
+	/**
+	 * 设置 提交地址.
+	 * 
+	 * @param landingPageURL
+	 *            the landingPageURL to set
+	 */
+	public void setLandingPageURL(String landingPageURL){
+		this.landingPageURL = landingPageURL;
+	}
+
+	/**
+	 * 设置 提交的method.
+	 * 
+	 * @param submitMethod
+	 *            the submitMethod to set
+	 */
+	public void setSubmitMethod(String submitMethod){
+		this.submitMethod = submitMethod;
+	}
+}
Index: mp2-commons/src/main/java/com/baozun/mp2/bean/package-info.java
===================================================================
--- mp2-commons/src/main/java/com/baozun/mp2/bean/package-info.java	(revision 0)
+++ mp2-commons/src/main/java/com/baozun/mp2/bean/package-info.java	(working copy)
@@ -0,0 +1,20 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ *封装{@code org.apache.commons.beanutils}经常使用的工具类
+ *@since 1.0.0
+ */
+package com.baozun.mp2.bean;
\ No newline at end of file
Index: mp2-commons/src/main/java/com/baozun/mp2/bean/converters/DatePatternConverter.java
===================================================================
--- mp2-commons/src/main/java/com/baozun/mp2/bean/converters/DatePatternConverter.java	(revision 0)
+++ mp2-commons/src/main/java/com/baozun/mp2/bean/converters/DatePatternConverter.java	(working copy)
@@ -0,0 +1,148 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.mp2.bean.converters;
+
+import java.util.Date;
+import java.util.Locale;
+
+import org.apache.commons.beanutils.converters.DateTimeConverter;
+
+import com.baozun.mp2.date.DatePattern;
+import com.baozun.mp2.util.DateFormatUtil;
+import com.baozun.mp2.util.Validator;
+
+/**
+ * The Class DateConverter,依赖apache commons-beanutils工具包<br>
+ * 
+ * for example:
+ * 
+ * <pre>
+ * User a = new User();
+ * a.setId(5L);
+ * Date now = new Date();
+ * a.setDate(now);
+ * User b = new User();
+ * 
+ * DatePatternConverter converter = new DatePatternConverter(DatePattern.forToString, Locale.US);
+ * ConvertUtils.register(converter, Date.class);
+ * 
+ * BeanUtil.copyProperty(b, a, &quot;date&quot;);
+ * </pre>
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">金鑫</a>
+ * @version 1.0 2014-5-4 0:35:31
+ * @see org.apache.commons.beanutils.converters.DateConverter
+ * @see org.apache.commons.beanutils.converters.DateTimeConverter
+ * @see org.apache.commons.beanutils.converters.AbstractConverter
+ * @see org.apache.commons.beanutils.Converter
+ * @see org.apache.commons.beanutils.ConvertUtils#register(org.apache.commons.beanutils.Converter, Class)
+ * @since 1.0.0
+ */
+public class DatePatternConverter extends DateTimeConverter{
+
+	/** pattern {@link DatePattern}. */
+	private String	pattern;
+
+	/** The locale. */
+	private Locale	locale	= Locale.getDefault();
+
+	/**
+	 * Instantiates a new date converter.
+	 * 
+	 * @param datePattern
+	 *            {@link DatePattern}
+	 * 
+	 * @see org.apache.commons.beanutils.converters.DateConverter
+	 * @see org.apache.commons.beanutils.converters.DateTimeConverter
+	 * @see org.apache.commons.beanutils.converters.AbstractConverter
+	 * @see org.apache.commons.beanutils.Converter
+	 * @see org.apache.commons.beanutils.ConvertUtils#register(org.apache.commons.beanutils.Converter, Class)
+	 */
+	public DatePatternConverter(String datePattern){
+		this.pattern = datePattern;
+	}
+
+	/**
+	 * Instantiates a new date converter.
+	 * 
+	 * @param datePattern
+	 *            {@link DatePattern}
+	 * @param locale
+	 *            the locale
+	 * 
+	 * @see org.apache.commons.beanutils.converters.DateConverter
+	 * @see org.apache.commons.beanutils.converters.DateTimeConverter
+	 * @see org.apache.commons.beanutils.converters.AbstractConverter
+	 * @see org.apache.commons.beanutils.Converter
+	 * @see org.apache.commons.beanutils.ConvertUtils#register(org.apache.commons.beanutils.Converter, Class)
+	 */
+	public DatePatternConverter(String datePattern, Locale locale){
+		this.pattern = datePattern;
+		this.locale = locale;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.apache.commons.beanutils.converters.AbstractConverter#getDefaultType()
+	 */
+	@Override
+	protected Class<?> getDefaultType(){
+		return Date.class;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.apache.commons.beanutils.converters.AbstractConverter#convert(java.lang.Class, java.lang.Object)
+	 */
+	@SuppressWarnings("unchecked")
+	@Override
+	public <T> T convert(Class<T> type,Object value){
+		if (Validator.isNullOrEmpty(pattern)){
+			throw new IllegalArgumentException("value can't be null/empty!");
+		}
+
+		if (Validator.isNullOrEmpty(value)){
+			return null;
+		}
+		Date dateObj = null;
+		if (value instanceof String){
+			dateObj = DateFormatUtil.parse(value.toString(), pattern, locale);
+		}
+		return (T) dateObj;
+	}
+
+	/**
+	 * Sets the pattern {@link DatePattern}.
+	 * 
+	 * @param pattern
+	 *            the pattern to set
+	 */
+	public void setPattern(String pattern){
+		this.pattern = pattern;
+	}
+
+	/**
+	 * Sets the locale.
+	 * 
+	 * @param locale
+	 *            the locale to set
+	 */
+	public void setLocale(Locale locale){
+		this.locale = locale;
+	}
+}
\ No newline at end of file
Index: mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/PublicTokenResponse.java
===================================================================
--- mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/PublicTokenResponse.java	(revision 0)
+++ mp2-biz/mp2-payment/src/main/java/com/baozun/payment/payment/adaptor/tcash/PublicTokenResponse.java	(working copy)
@@ -0,0 +1,113 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.payment.payment.adaptor.tcash;
+
+import java.io.Serializable;
+
+/**
+ * Below table shows T-Cash Public Token Generator response (Json).
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 1.0.8 2014年7月21日 下午3:35:08
+ * @since 1.0.8
+ */
+public final class PublicTokenResponse implements Serializable{
+
+	/** The Constant serialVersionUID. */
+	private static final long	serialVersionUID	= 288232184048495608L;
+
+	/**
+	 * Public token that used by customer when they redirect into T-Cash landing page<br>
+	 * Example 1: -----BEGIN PGP MESSAGE-----\nVersion: BCPG v1.47\n\nhQEOAyYtPQbS+5JtEAP/fI1MbXcrVa/83WlZS6y+76g
+	 */
+	private String				pgpToken;
+
+	/**
+	 * T-Cash reference number that will be used by merchant for checking customer transaction<br>
+	 * Example 1: 2506141402007010.
+	 */
+	private String				refNum;
+
+	/**
+	 * Limit time for using public token (in milisecond)<br>
+	 * Example 1: 1403679721180.
+	 */
+	private String				fastTime;
+
+	/**
+	 * 获得 public token that used by customer when they redirect into T-Cash landing page<br>
+	 * Example 1: -----BEGIN PGP MESSAGE-----\nVersion: BCPG v1.
+	 * 
+	 * @return the pgpToken
+	 */
+	public String getPgpToken(){
+		return pgpToken;
+	}
+
+	/**
+	 * 设置 public token that used by customer when they redirect into T-Cash landing page<br>
+	 * Example 1: -----BEGIN PGP MESSAGE-----\nVersion: BCPG v1.
+	 * 
+	 * @param pgpToken
+	 *            the pgpToken to set
+	 */
+	public void setPgpToken(String pgpToken){
+		this.pgpToken = pgpToken;
+	}
+
+	/**
+	 * 获得 t-Cash reference number that will be used by merchant for checking customer transaction<br>
+	 * Example 1: 2506141402007010.
+	 * 
+	 * @return the refNum
+	 */
+	public String getRefNum(){
+		return refNum;
+	}
+
+	/**
+	 * 设置 t-Cash reference number that will be used by merchant for checking customer transaction<br>
+	 * Example 1: 2506141402007010.
+	 * 
+	 * @param refNum
+	 *            the refNum to set
+	 */
+	public void setRefNum(String refNum){
+		this.refNum = refNum;
+	}
+
+	/**
+	 * 获得 limit time for using public token (in milisecond)<br>
+	 * Example 1: 1403679721180.
+	 * 
+	 * @return the fastTime
+	 */
+	public String getFastTime(){
+		return fastTime;
+	}
+
+	/**
+	 * 设置 limit time for using public token (in milisecond)<br>
+	 * Example 1: 1403679721180.
+	 * 
+	 * @param fastTime
+	 *            the fastTime to set
+	 */
+	public void setFastTime(String fastTime){
+		this.fastTime = fastTime;
+	}
+
+}
Index: mp2-commons/src/main/java/com/baozun/mp2/bean/PropertyUtil.java
===================================================================
--- mp2-commons/src/main/java/com/baozun/mp2/bean/PropertyUtil.java	(revision 0)
+++ mp2-commons/src/main/java/com/baozun/mp2/bean/PropertyUtil.java	(working copy)
@@ -0,0 +1,212 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.baozun.mp2.bean;
+
+import java.lang.reflect.InvocationTargetException;
+import java.util.Map;
+
+import org.apache.commons.beanutils.BeanUtils;
+import org.apache.commons.beanutils.PropertyUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * The Class PropertyUtil.
+ * 
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a>
+ * @version 1.0.8 2014-7-21 17:45:30
+ * @see org.apache.commons.beanutils.PropertyUtils
+ * @see com.feilong.commons.core.bean.BeanUtil
+ */
+public final class PropertyUtil{
+
+	/** The Constant log. */
+	@SuppressWarnings("unused")
+	private final static Logger	log	= LoggerFactory.getLogger(PropertyUtil.class);
+
+	/** Don't let anyone instantiate this class. */
+	private PropertyUtil(){}
+
+	/**
+	 * <p>
+	 * 把Bean的属性值放入到一个Map里面。
+	 * </p>
+	 * 
+	 * 这个方法返回一个Object中所有的可读属性，并将属性名/属性值放入一个Map中，<br>
+	 * 另外还有一个名为class的属性，属性值是Object的类名，事实上class是java.lang.Object的一个属性
+	 * 
+	 * @param bean
+	 *            Bean whose properties are to be extracted
+	 * @return The set of properties for the bean
+	 * @throws BeanUtilException
+	 *             if IllegalAccessException | InvocationTargetException | NoSuchMethodException
+	 * @see org.apache.commons.beanutils.BeanUtils#describe(Object)
+	 * @see org.apache.commons.beanutils.PropertyUtils#describe(Object)
+	 * @see com.feilong.commons.core.bean.BeanUtil#describe(Object)
+	 */
+	public static Map<String, Object> describe(Object bean) throws BeanUtilException{
+		try{
+			//Return the entire set of properties for which the specified bean provides a read method.
+			Map<String, Object> map = PropertyUtils.describe(bean);
+			return map;
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+
+	/**
+	 * 使用 {@link PropertyUtils#setProperty(Object, String, Object)} 来设置属性值(<b>不会进行类型转换</b>).
+	 * 
+	 * <pre>
+	 * 
+	 * BeanUtils.setProperty(pt1, &quot;x&quot;, &quot;9&quot;); // 这里的9是String类型
+	 * PropertyUtils.setProperty(pt1, &quot;x&quot;, 9); // 这里的是int类型
+	 * // 这两个类BeanUtils和PropertyUtils,前者能自动将int类型转化，后者不能
+	 * </pre>
+	 * 
+	 * 
+	 * <pre>
+	 * {@code
+	 * getProperty和setProperty,它们都只有2个参数，第一个是JavaBean对象，第二个是要操作的属性名。
+	 * Company c = new Company();
+	 * c.setName("Simple");
+	 *  
+	 * 对于Simple类型，参数二直接是属性名即可
+	 * //Simple
+	 * System.out.println(BeanUtils.getProperty(c, "name"));
+	 *  
+	 * 对于Map类型，则需要以“属性名（key值）”的形式
+	 * //Map
+	 *     System.out.println(BeanUtils.getProperty(c, "address (A2)"));
+	 *     HashMap am = new HashMap();
+	 *     am.put("1","234-222-1222211");
+	 *     am.put("2","021-086-1232323");
+	 *     BeanUtils.setProperty(c,"telephone",am);
+	 * System.out.println(BeanUtils.getProperty(c, "telephone (2)"));
+	 *  
+	 * 对于Indexed，则为“属性名[索引值]”，注意这里对于ArrayList和数组都可以用一样的方式进行操作。
+	 * //index
+	 *     System.out.println(BeanUtils.getProperty(c, "otherInfo[2]"));
+	 *     BeanUtils.setProperty(c, "product[1]", "NOTES SERVER");
+	 *     System.out.println(BeanUtils.getProperty(c, "product[1]"));
+	 *  
+	 * 当然这3种类也可以组合使用啦！
+	 * //nest
+	 *     System.out.println(BeanUtils.getProperty(c, "employee[1].name"));
+	 * 
+	 * }
+	 * </pre>
+	 * 
+	 * @param bean
+	 *            Bean whose property is to be modified
+	 * @param name
+	 *            Possibly indexed and/or nested name of the property to be modified
+	 * @param value
+	 *            Value to which this property is to be set
+	 * @throws BeanUtilException
+	 *             if IllegalAccessException | InvocationTargetException | NoSuchMethodException
+	 * @see org.apache.commons.beanutils.BeanUtils#setProperty(Object, String, Object)
+	 * @see org.apache.commons.beanutils.PropertyUtils#setProperty(Object, String, Object)
+	 * @see com.feilong.commons.core.bean.BeanUtil#setProperty(Object, String, Object)
+	 */
+	public static void setProperty(Object bean,String name,Object value) throws BeanUtilException{
+		try{
+			//Set the value of the specified property of the specified bean, no matter which property reference format is used, with no type conversions.
+
+			// PropertyUtils的功能类似于BeanUtils,但在底层不会对传递的数据做转换处理
+			PropertyUtils.setProperty(bean, name, value);
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+
+	// [start] getProperty
+
+	/**
+	 * 使用 {@link PropertyUtils#getProperty(Object, String)} 类从对象中取得属性值.
+	 * 
+	 * <pre>
+	 * {@code
+	 * getProperty和setProperty,它们都只有2个参数，第一个是JavaBean对象，第二个是要操作的属性名。
+	 * Company c = new Company();
+	 * c.setName("Simple");
+	 *  
+	 * 对于Simple类型，参数二直接是属性名即可
+	 * //Simple
+	 * System.out.println(BeanUtils.getProperty(c, "name"));
+	 *  
+	 * 对于Map类型，则需要以“属性名（key值）”的形式
+	 * //Map
+	 *     System.out.println(BeanUtils.getProperty(c, "address (A2)"));
+	 *     HashMap am = new HashMap();
+	 *     am.put("1","234-222-1222211");
+	 *     am.put("2","021-086-1232323");
+	 *     BeanUtils.setProperty(c,"telephone",am);
+	 * System.out.println(BeanUtils.getProperty(c, "telephone (2)"));
+	 *  
+	 * 对于Indexed，则为“属性名[索引值]”，注意这里对于ArrayList和数组都可以用一样的方式进行操作。
+	 * //index
+	 *     System.out.println(BeanUtils.getProperty(c, "otherInfo[2]"));
+	 *     BeanUtils.setProperty(c, "product[1]", "NOTES SERVER");
+	 *     System.out.println(BeanUtils.getProperty(c, "product[1]"));
+	 *  
+	 * 当然这3种类也可以组合使用啦！
+	 * //nest
+	 *     System.out.println(BeanUtils.getProperty(c, "employee[1].name"));
+	 * 
+	 * }
+	 * </pre>
+	 * 
+	 * <h4>{@link BeanUtils#getProperty(Object, String)}&{@link PropertyUtils#getProperty(Object, String)}的区别</h4>
+	 * 
+	 * <blockquote>
+	 * <p>
+	 * {@link BeanUtils#getProperty(Object, String)} 会将结果转成String返回,<br>
+	 * {@link PropertyUtils#getProperty(Object, String)} 结果是Object类型,不会做类型转换
+	 * </p>
+	 * </blockquote>
+	 * 
+	 * @param <T>
+	 *            the generic type
+	 * @param bean
+	 *            Bean whose property is to be extracted
+	 * @param name
+	 *            Possibly indexed and/or nested name of the property to be extracted
+	 * 
+	 * @return 使用{@link PropertyUtils#getProperty(Object, String)} 从对象中取得属性值
+	 * @throws BeanUtilException
+	 *             if IllegalAccessException | InvocationTargetException | NoSuchMethodException
+	 * @see com.feilong.commons.core.bean.BeanUtil#getProperty(Object, String)
+	 * @see org.apache.commons.beanutils.BeanUtils#getProperty(Object, String)
+	 * @see org.apache.commons.beanutils.PropertyUtils#getProperty(Object, String)
+	 * @see org.apache.commons.beanutils.PropertyUtilsBean
+	 */
+	public static <T> T getProperty(Object bean,String name) throws BeanUtilException{
+		//Return the value of the specified property of the specified bean, no matter which property reference format is used, with no type conversions.
+		//For more details see PropertyUtilsBean.
+		try{
+			@SuppressWarnings("unchecked")
+			T propertyValue = (T) PropertyUtils.getProperty(bean, name);
+			return propertyValue;
+		}catch (Exception e){
+			e.printStackTrace();
+			throw new BeanUtilException(e);
+		}
+	}
+	// [end]
+}
\ No newline at end of file
Index: mp2-web/mp2-web-marketplace/mp2-web-marketplace-trade/src/main/resources/spring/payment/payment/adaptor-tcash.xml
===================================================================
--- mp2-web/mp2-web-marketplace/mp2-web-marketplace-trade/src/main/resources/spring/payment/payment/adaptor-tcash.xml	(revision 0)
+++ mp2-web/mp2-web-marketplace/mp2-web-marketplace-trade/src/main/resources/spring/payment/payment/adaptor-tcash.xml	(working copy)
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
+	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
+	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
+		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
+		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
+		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
+
+	<!-- tcashPayAdaptor -->
+	<bean id="tcashPayAdaptor" class="com.baozun.payment.payment.adaptor.tcash.TcashPayAdaptor">
+		<property name="terminalId" value="${tcash.terminalId}" />
+
+		<property name="userKey" value="${tcash.userKey}" />
+		<property name="password" value="${tcash.password}" />
+		<property name="signature" value="${tcash.signature}" />
+
+		<property name="publicTokenURL" value="${tcash.publicTokenURL}" />
+		<property name="landingPageURL" value="${tcash.landingPageURL}" />
+		
+		<property name="submitMethod" value="${tcash.submit.method}" />
+		<property name="pricePattern" value="${tcash.pricePattern}" />
+	</bean>
+</beans>
\ No newline at end of file
Index: mp2-commons/src/main/java/com/baozun/mp2/bean/converters/package-info.java
===================================================================
--- mp2-commons/src/main/java/com/baozun/mp2/bean/converters/package-info.java	(revision 0)
+++ mp2-commons/src/main/java/com/baozun/mp2/bean/converters/package-info.java	(working copy)
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2008 feilong (venusdrogon@163.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ *相关自定义的converters
+ * @author <a href="mailto:venusdrogon@163.com">feilong</a> 
+ * @version 1.0.7 2014年6月18日 上午12:24:44 
+ * @since 1.0.7
+ */
+package com.baozun.mp2.bean.converters;
\ No newline at end of file
