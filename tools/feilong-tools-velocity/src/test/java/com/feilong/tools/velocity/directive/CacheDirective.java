/* * Copyright (C) 2008 feilong (venusdrogon@163.com) * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *         http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.feilong.tools.velocity.directive;import java.io.IOException;import java.io.Serializable;import java.io.StringWriter;import java.io.Writer;import java.util.Hashtable;import org.apache.velocity.context.InternalContextAdapter;import org.apache.velocity.exception.MethodInvocationException;import org.apache.velocity.exception.ParseErrorException;import org.apache.velocity.exception.ResourceNotFoundException;import org.apache.velocity.runtime.directive.Directive;import org.apache.velocity.runtime.parser.node.Node;import org.apache.velocity.runtime.parser.node.SimpleNode;/** * * Velocity模板上用于控制缓存的指令 * * * * @author Winter Lau * * @date 2009-3-16 下午04:40:19. */@SuppressWarnings("all")public class CacheDirective extends Directive{    /** The Constant body_tpls. */    static final Hashtable<String, String> body_tpls = new Hashtable<String, String>();    /*     * (non-Javadoc)     *      * @see org.apache.velocity.runtime.directive.Directive#getName()     */    @Override    public String getName(){        return "cache";    } // 指定指令的名称    /*     * (non-Javadoc)     *      * @see org.apache.velocity.runtime.directive.Directive#getType()     */    @Override    public int getType(){        return BLOCK;    } // 指定指令类型为块指令    /*     * (non-Javadoc)     *      * @see org.apache.velocity.runtime.directive.Directive#render()     */    @Override    public boolean render(InternalContextAdapter context,Writer writer,Node node) throws IOException,ResourceNotFoundException,                    ParseErrorException,MethodInvocationException{        // 获得缓存信息        SimpleNode sn_region = (SimpleNode) node.jjtGetChild(0);        String region = (String) sn_region.value(context);        SimpleNode sn_key = (SimpleNode) node.jjtGetChild(1);        Serializable key = (Serializable) sn_key.value(context);        Node body = node.jjtGetChild(2);        // 检查内容是否有变化        String tpl_key = key + "@" + region;        String cache_html = "aaaa";        StringWriter sw = new StringWriter();        body.render(context, sw);        writer.write(cache_html);        return true;    }}